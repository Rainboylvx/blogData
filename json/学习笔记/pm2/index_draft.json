{"data":{},"__content":"<h2 id=\"%E7%AE%80%E4%BB%8B\" tabindex=\"-1\">简介</h2>\n<blockquote>\n<p><code>pm2是node进程管理工具，可以利用它来简化很多node应用管理的繁琐任务，如性能监控、自动重启、负载均衡等，而且使用非常简单。</code></p>\n</blockquote>\n<h2 id=\"%E5%85%A8%E5%B1%80%E5%AE%89%E8%A3%85\" tabindex=\"-1\">全局安装</h2>\n<p>sudo npm install <code>pm2@latest -g</code></p>\n<h2 id=\"%E7%94%A8%E6%B3%95\" tabindex=\"-1\">用法</h2>\n<ul>\n<li>最简单的启用一个应用:  <code>pm2 start app.js</code></li>\n<li>停止：<code>pm2 stop app_name|app_id</code></li>\n<li>删除：<code>pm2 delete app_name|app_id</code></li>\n<li>重启：<code>pm2 restart app_name|app_id</code></li>\n<li>停止所有：<code>pm2 stop all</code></li>\n<li>查看所有的进程：<code>pm2 list</code></li>\n<li>查看所有的进程状态：<code>pm2 status</code></li>\n<li>查看某一个进程的信息：<code>pm2 describe app_name|app_id</code></li>\n<li>监听:<code>pm2 monit</code></li>\n</ul>\n<h2 id=\"%E5%8F%82%E6%95%B0%E8%AF%B4%E6%98%8E\" tabindex=\"-1\">参数说明</h2>\n<ul>\n<li>--watch：监听应用目录源码的变化，一旦发生变化，自动重启。如果要精确监听、不见听的目录，最好通过配置文件</li>\n<li>-i --instances：启用多少个实例，可用于负载均衡。如果-i 0或者-i max，则根据当前机器核数确定实例数目，可以弥补node.js缺陷</li>\n<li>--ignore-watch：排除监听的目录/文件，可以是特定的文件名，也可以是正则。比如--ignore-watch=&quot;test node_modules &quot;some scripts&quot;</li>\n<li>-n --name：应用的名称。查看应用信息的时候可以用到</li>\n<li>-o --output <code>&lt;path&gt;</code>：标准输出日志文件的路径，有默认路径</li>\n<li>-e --error <code>&lt;path&gt;</code>：错误输出日志文件的路径，有默认路径</li>\n<li>--interpreter <code>&lt;interpreter&gt;</code>：the interpreter pm2 should use for executing app (bash, python...)。比如你用的coffee script来编写应用</li>\n</ul>\n<h2 id=\"%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6\" tabindex=\"-1\">配置文件</h2>\n<p>配置文件里的设置项，跟命令行参数基本是一一对应的\n配置文件的格式可以为json/yaml\njson格式的配置文件，pm2当作普通的js文件来处理，所以可以在里面添加注释或者编写代码，这对于动态调整配置很有好处\n如果启动的时候指定了配置文件，那么命令行参数会被忽略（个别参数除外，比如--env）</p>\n<h3 id=\"%E5%AE%8C%E6%95%B4%E5%8F%82%E6%95%B0%E5%8D%95%E4%B8%AAapp%E9%85%8D%E7%BD%AE%EF%BC%9A\" tabindex=\"-1\">完整参数单个app配置：</h3>\n<pre><code class=\"language-javascript\">{\n  &quot;name&quot;             : &quot;node-app&quot;, //启动app名称\n  &quot;cwd&quot;              : &quot;/srv/node-app/current&quot;, \n  &quot;args&quot;             : [&quot;--toto=heya coco&quot;, &quot;-d&quot;, &quot;1&quot;],\n  &quot;script&quot;           : &quot;bin/app.js&quot;,\n  &quot;node_args&quot;        : [&quot;--harmony&quot;, &quot; --max-stack-size=102400000&quot;],\n  &quot;log_date_format&quot;  : &quot;YYYY-MM-DD HH:mm Z&quot;,\n  &quot;error_file&quot;       : &quot;/var/log/node-app/node-app.stderr.log&quot;,\n  &quot;out_file&quot;         : &quot;log/node-app.stdout.log&quot;,\n  &quot;pid_file&quot;         : &quot;pids/node-geo-api.pid&quot;,\n  &quot;instances&quot;        : 6, //or 0 =&gt; 'max'\n  &quot;min_uptime&quot;       : &quot;200s&quot;, // 200 seconds, defaults to 1000\n  &quot;max_restarts&quot;     : 10, // defaults to 15\n  &quot;max_memory_restart&quot;: &quot;1M&quot;, // 1 megabytes, e.g.: &quot;2G&quot;, &quot;10M&quot;, &quot;100K&quot;, 1024 the default unit is byte.\n  &quot;cron_restart&quot;     : &quot;1 0 * * *&quot;,\n  &quot;watch&quot;            : false,\n  &quot;ignore_watch&quot;      : [&quot;[\\\\/\\\\\\\\]\\\\./&quot;, &quot;node_modules&quot;],\n  &quot;merge_logs&quot;       : true,\n  &quot;exec_interpreter&quot; : &quot;node&quot;,\n  &quot;exec_mode&quot;        : &quot;fork&quot;,\n  &quot;autorestart&quot;      : false, // enable/disable automatic restart when an app crashes or exits\n  &quot;vizion&quot;           : false, // enable/disable vizion features (versioning control)\n  // Default environment variables that will be injected in any environment and at any start\n  &quot;env&quot;: {\n    &quot;NODE_ENV&quot;: &quot;production&quot;,\n    &quot;AWESOME_SERVICE_API_TOKEN&quot;: &quot;xxx&quot;\n  }\n  &quot;env_*&quot; : {\n    &quot;SPECIFIC_ENV&quot; : true\n  }\n}\n</code></pre>\n<p>完整配置文件写法：\n{\n&quot;apps&quot; : [{\n// Application #1\n&quot;name&quot;        : &quot;worker-app&quot;,\n&quot;script&quot;      : &quot;worker.js&quot;,\n&quot;args&quot;        : [&quot;--toto=heya coco&quot;, &quot;-d&quot;, &quot;1&quot;],\n&quot;watch&quot;       : true,\n&quot;node_args&quot;   : &quot;--harmony&quot;,\n&quot;merge_logs&quot;  : true,\n&quot;cwd&quot;         : &quot;/this/is/a/path/to/start/script&quot;,\n&quot;env&quot;: {\n&quot;NODE_ENV&quot;: &quot;development&quot;,\n&quot;AWESOME_SERVICE_API_TOKEN&quot;: &quot;xxx&quot;\n},\n&quot;env_production&quot; : {\n&quot;NODE_ENV&quot;: &quot;production&quot;\n},\n&quot;env_staging&quot; : {\n&quot;NODE_ENV&quot; : &quot;staging&quot;,\n&quot;TEST&quot;     : true\n}\n},{\n// Application #2\n&quot;name&quot;       : &quot;api-app&quot;,\n&quot;script&quot;     : &quot;api.js&quot;,\n&quot;instances&quot;  : 4,\n&quot;exec_mode&quot;  : &quot;cluster_mode&quot;,\n&quot;error_file&quot; : &quot;./examples/child-err.log&quot;,\n&quot;out_file&quot;   : &quot;./examples/child-out.log&quot;,\n&quot;pid_file&quot;   : &quot;./examples/child.pid&quot;\n}]\n}</p>\n<p>通过yaml管理多个应用\nprocess.yml:</p>\n<pre><code>apps:\n  - script   : app.js\n    instances: 4\n    exec_mode: cluster\n  - script : worker.js\n    watch  : true\n    env    :\n      NODE_ENV: development\n    env_production:\n      NODE_ENV: production\n</code></pre>\n<p>启动：pm2 start process.yml\n环境切换\n正式开发中分为不同的环境(开发环境、测试环境、生产环境)，我们需要根据不同的情景来切换各种环境\npm2通过在配置文件中通过env_xx来声明不同环境的配置，然后在启动应用时，通过--env参数指定运行的环境\n环境配置定义，在应用中，可以通过process.env.REMOTE_ADDR等来读取配置中生命的变量：\n&quot;env&quot;: {\n&quot;NODE_ENV&quot;: &quot;production&quot;,\n&quot;REMOTE_ADDR&quot;: &quot;<a href=\"http://www.example.com/\">http://www.example.com/</a>&quot;\n},\n&quot;env_dev&quot;: {\n&quot;NODE_ENV&quot;: &quot;development&quot;,\n&quot;REMOTE_ADDR&quot;: &quot;<a href=\"http://wdev.example.com/\">http://wdev.example.com/</a>&quot;\n},\n&quot;env_test&quot;: {\n&quot;NODE_ENV&quot;: &quot;test&quot;,\n&quot;REMOTE_ADDR&quot;: &quot;<a href=\"http://wtest.example.com/\">http://wtest.example.com/</a>&quot;\n}</p>\n<p>启动指定的环境：pm2 start app.js --env development\n负载均衡\npm2 start app.js -i 3 # 开启三个进程\npm2 start app.js -i max # 根据机器CPU核数，开启对应数目的进程</p>\n<p>开机自动启动</p>\n<p>通过pm2 save保存当前进程状态。\n通过pm2 startup [platform]生成开机自启动的命令。例如：pm2 startup centeros\n将步骤2生成的命令，粘贴到控制台进行，搞定。</p>\n<p>更新\n安装最新的：npm install pm2@latest -g<br>\n然后在内存中更新：pm2 update\n参考</p>\n<p>官方文档1：<a href=\"http://pm2.keymetrics.io/docs/usage/pm2-doc-single-page/\">http://pm2.keymetrics.io/docs/usage/pm2-doc-single-page/</a></p>\n<p>官方文档2：<a href=\"http://pm2.keymetrics.io/docs/usage/quick-start/\">http://pm2.keymetrics.io/docs/usage/quick-start/</a></p>\n<p>PM2实用入门指南：<a href=\"http://www.cnblogs.com/chyingp/p/pm2-documentation.html\">http://www.cnblogs.com/chyingp/p/pm2-documentation.html</a></p>\n<p>nodejs高大上的部署方式-PM2: <a href=\"http://www.2cto.com/kf/201501/367718.ht\">http://www.2cto.com/kf/201501/367718.ht</a></p>\n<p>链接：<a href=\"https://www.jianshu.com/p/f640450bd120\">https://www.jianshu.com/p/f640450bd120</a></p>\n"}