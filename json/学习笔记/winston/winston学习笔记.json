{"data":{"_id":"Hy1rZZHAX","title":"winston学习笔记","date":"2018-11-23 12:25","update":"2018-11-23 12:25","series":"无","categories":["学习笔记"],"tags":["node","日志"]},"__content":"<h2 id=\"%E4%BB%8B%E7%BA%A7\" tabindex=\"-1\">介级</h2>\n<p><strong>什么是winston?</strong></p>\n<p>winston是一个基于<strong>node</strong>的轻量的日志管理组件包.<a href=\"https://github.com/winstonjs/winston\">winston github地址</a></p>\n<p><a href=\"https://github.com/rainboy-learn/winston\">这里是我练习winston的地址</a></p>\n<h2 id=\"%E5%85%A5%E9%97%A8\" tabindex=\"-1\">入门</h2>\n<p>最简单的创建logger的方式是使用<code>winston.createLogger</code></p>\n<pre><code class=\"language-javascript\">const logger = winston.createLogger({\n  level: 'info',\n  format: winston.format.json(),\n  transports: [\n    //\n    // - Write to all logs with level `info` and below to `combined.log`\n    // - 所有等级&lt;=info的日志写入到 combined.log 里\n    // - Write all logs error (and below) to `error.log`.\n    // - 所有等级 &lt;= error 的写入到 error.log里\n    //\n    new winston.transports.File({ filename: 'error.log', level: 'error' }),\n    new winston.transports.File({ filename: 'combined.log' })\n  ]\n});\n\n//\n// If we're not in production then log to the `console` with the format:\n// `${info.level}: ${info.message} JSON.stringify({ ...rest }) `\n//\nif (process.env.NODE_ENV !== 'production') {\n  logger.add(new winston.transports.Console({\n    format: winston.format.simple()\n  }));\n}\n</code></pre>\n<ul>\n<li>在使用<code>winston.createLogger</code>时,可以指定参数:<code>transports</code>(输出功能,输出到哪里)</li>\n<li>可以使用<code>add</code>函数,动态增加<code>transports</code></li>\n</ul>\n<h2 id=\"%E5%8A%9F%E8%83%BD%E7%9B%AE%E5%BD%95\" tabindex=\"-1\">功能目录</h2>\n<ul>\n<li><a href=\"#logging\">输出日志</a>\n<ul>\n<li><a href=\"#creating-your-own-logger\">创建你的logger</a></li>\n<li><a href=\"#streams-objectmode-and-info-objects\">流,对象模式,info对象</a></li>\n</ul>\n</li>\n<li>[格式化]\n<ul>\n<li><a href=\"#combining-formats\">组合 格式</a></li>\n<li><a href=\"#string-interpolation\">字符串格式化/改写</a></li>\n<li><a href=\"#filtering-info-objects\">过滤<code>info</code>对象</a></li>\n<li><a href=\"#creating-custom-formats\">创建定制的格式化</a></li>\n</ul>\n</li>\n<li>[日志等级]\n<ul>\n<li><a href=\"#using-logging-levels\">使用日志等级</a></li>\n<li><a href=\"#using-custom-logging-levels\">拼合定制的日志等级</a></li>\n</ul>\n</li>\n<li>[输出]\n<ul>\n<li><a href=\"#multiple-transports-of-the-same-type\">同类型的多个输出</a></li>\n<li><a href=\"#adding-custom-transports\">加入定制的输出</a></li>\n</ul>\n</li>\n<li><a href=\"#exceptions\">异常</a>\n<ul>\n<li><a href=\"#handling-uncaught-exceptions-with-winston\">用winston处理没有捕获的异常</a></li>\n<li><a href=\"#to-exit-or-not-to-exit\">退出或者没有退出</a></li>\n</ul>\n</li>\n<li><a href=\"#profiling\">性能分析</a></li>\n<li><a href=\"#streaming-logs\">Streaming Logs</a></li>\n<li><a href=\"#querying-logs\">Querying Logs</a></li>\n<li><a href=\"#further-reading\">Further Reading</a>\n<ul>\n<li><a href=\"#using-the-default-logger\">Using the default logger</a></li>\n<li><a href=\"#awaiting-logs-to-be-written-in-winston\">Awaiting logs to be written in <code>winston</code></a></li>\n<li><a href=\"#working-with-multiple-loggers-in-winston\">Working with multiple Loggers in <code>winston</code></a></li>\n</ul>\n</li>\n<li><a href=\"#installation\">Installation</a></li>\n<li><a href=\"#run-tests\">Run Tests</a></li>\n</ul>\n<h2 id=\"%E6%97%A5%E5%BF%97\" tabindex=\"-1\">日志</h2>\n<p><strong>定制的日志等级</strong></p>\n<pre><code class=\"language-javascript\">const levels = {\n  error: 0,\n  warn: 1,\n  info: 2,\n  verbose: 3,\n  debug: 4,\n  silly: 5\n};\n</code></pre>\n<p><strong>创建自己的logger</strong>,使用<code>winston.createLogger</code></p>\n<pre><code class=\"language-javascript\">const logger = winston.createLogger({\n  transports: [\n    new winston.transports.Console(),\n    new winston.transports.File({ filename: 'combined.log' })\n  ]\n});\n</code></pre>\n<p>它接受下面的参数:</p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Default</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>level</code></td>\n<td><code>'info'</code></td>\n<td>输出比之个等级小于等于的信息</td>\n</tr>\n<tr>\n<td><code>levels</code></td>\n<td><code>winston.config.npm.levels</code></td>\n<td>等级(还有颜色)代表日志的优先级</td>\n</tr>\n<tr>\n<td><code>format</code></td>\n<td><code>winston.format.json</code></td>\n<td>格式化日志信息(see: [Formats])</td>\n</tr>\n<tr>\n<td><code>transports</code></td>\n<td><code>[]</code> <em>(No transports)</em></td>\n<td>设定日志输出的地方</td>\n</tr>\n<tr>\n<td><code>exitOnError</code></td>\n<td><code>true</code></td>\n<td>如果为 false, 处理异常不会引起 <code>process.exit</code></td>\n</tr>\n<tr>\n<td><code>silent</code></td>\n<td><code>false</code></td>\n<td>如果为true,所有的日志都不会输出</td>\n</tr>\n</tbody>\n</table>\n<p>在<code>createLogger</code>里的<code>levels</code>,会被定义成一个便捷的method在<code>logger</code>上.</p>\n<pre><code class=\"language-javascript\">//\n// Logging\n//\nlogger.log({\n  level: 'info',\n  message: 'Hello distributed log files!'\n});\n\nlogger.info('Hello again distributed logs');\n</code></pre>\n<p>在通过<code>createLogger</code>创建<code>logger</code>后,你可以<strong>添加</strong>或<strong>删除</strong><code>transports</code></p>\n<pre><code class=\"language-javascript\">const files = new winston.transports.File({ filename: 'combined.log' });\nconst console = new winston.transports.Console();\n\nlogger\n  .clear()          // Remove all transports\n  .add(console)     // Add console transport\n  .add(files)       // Add file transport\n  .remove(console); // Remove console transport\n</code></pre>\n<p>你也可以大规模的重新配置<code>logger</code>,通过使用<code>configure</code>方法</p>\n<pre><code class=\"language-javascript\">const logger = winston.createLogger({\n  level: 'info',\n  transports: [\n    new winston.transports.Console(),\n    new winston.transports.File({ filename: 'combined.log' })\n  ]\n});\n\n//\n// Replaces the previous transports with those in the\n// new configuration wholesale.\n//\nconst DailyRotateFile = require('winston-daily-rotate-file');\nlogger.configure({\n  level: 'verbose',\n  transports: [\n    new DailyRotateFile(opts)\n  ]\n});\n</code></pre>\n<h2 id=\"%E6%B5%81%2C-%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%BC%8F%2Cinfo%E5%AF%B9%E8%B1%A1\" tabindex=\"-1\">流, 对象模式,<code>info</code>对象</h2>\n<p>在<code>winston</code>中,<code>logger</code>和<code>transport</code>被当成一个可以接受<code>info</code>对像的<code>objectMode</code>模式的流,<code>info</code>对象代表一条单独的日志信息,<code>info</code>对象必须至少有<code>level</code>和<code>message</code>两属性</p>\n<p>ps.有关node的stream,<a href=\"https://www.jianshu.com/p/2c76ef653af6\">看这篇文章</a></p>\n<pre><code class=\"language-javascript\">{\n  level: 'info',                 // Level of the logging message\n  message: 'Hey! Log something?' // Descriptive message being logged.\n}\n</code></pre>\n<p><code>winston.format</code>使之暴露了一些额外的属性</p>\n<ul>\n<li><code>splat</code>:字符串,插值到<code>%d,%s</code>这个类型的信息上</li>\n<li><code>timestamp</code>:接收时的时间戳</li>\n<li><code>lable</code>:定制的标签绑定到每条信息上</li>\n</ul>\n<p>(???)As a consumer you may add whatever properties you wish – internal state is maintained by Symbol properties:</p>\n<ul>\n<li><code>Symbol.for('level')</code> (READ-ONLY): equal to level property. Is treated as immutable by all code.</li>\n<li><code>Symbol.for('message')</code>: complete string message set by &quot;finalizing formats&quot;: json, logstash, printf, prettyPrint, and simple.</li>\n</ul>\n<h2 id=\"%E6%A0%BC%E5%BC%8F%E5%8C%96\" tabindex=\"-1\">格式化</h2>\n<p>通过<code>winston.format</code>来调用<code>format</code>函数,这一个单独的模块<code>logform</code></p>\n<p>通过使用<code>winston.format.printf</code>,来格式化输出字符串</p>\n<pre><code class=\"language-javascript\">const { createLogger, format, transports } = require('winston');\nconst { combine, timestamp, label, printf } = format;\n\nconst myFormat = printf(info =&gt; {\n  return `${info.timestamp} [${info.label}] ${info.level}: ${info.message}`;\n});\n\nconst logger = createLogger({\n  format: combine(\n    label({ label: 'right meow!' }),\n    timestamp(),\n    myFormat\n  ),\n  transports: [new transports.Console()]\n});\n</code></pre>\n<p>想学习更多的使用方法,查看<a href=\"https://github.com/winstonjs/logform\">logform</a></p>\n<h3 id=\"%E6%8B%BC%E5%90%88formats\" tabindex=\"-1\">拼合formats</h3>\n<p>使用<code>format.combine</code>可以把任意数量的<code>formats</code>拼合在一起</p>\n<pre><code class=\"language-javascript\">const { createLogger, format, transports } = require('winston');\nconst { combine, timestamp, label, prettyPrint } = format;\n\nconst logger = createLogger({\n  format: combine(\n    label({ label: 'right meow!' }),\n    timestamp(),\n    prettyPrint()\n  ),\n  transports: [new transports.Console()]\n})\n\nlogger.log({\n  level: 'info',\n  message: 'What time is the testing at?'\n});\n// Outputs:\n// { level: 'info',\n//   message: 'What time is the testing at?',\n//   label: 'right meow!',\n//   timestamp: '2017-09-30T03:57:26.875Z' }\n</code></pre>\n<h3 id=\"%E5%AD%97%E7%AC%A6%E4%B8%B2-%E6%B7%BB%E5%86%99\" tabindex=\"-1\">字符串 添写</h3>\n<p>感觉这个没有什么用,可以直接把值<code>${value}</code>这种方法写入<code>message</code>中</p>\n<h3 id=\"%E8%BF%87%E6%BB%A4info%E5%AF%B9%E8%B1%A1\" tabindex=\"-1\">过滤<code>info</code>对象</h3>\n<p>一个过虑的例子</p>\n<pre><code class=\"language-javascript\">const { createLogger, format, transports } = require('winston');\n\n// Ignore log messages if they have { private: true }\nconst ignorePrivate = format((info, opts) =&gt; {\n  if (info.private) { return false; }\n  return info;\n});\n\nconst logger = createLogger({\n  format: format.combine(\n    ignorePrivate(),\n    format.json()\n  ),\n  transports: [new transports.Console()]\n});\n\n// Outputs: {&quot;level&quot;:&quot;error&quot;,&quot;message&quot;:&quot;Public error to share&quot;}\nlogger.log({\n  level: 'error',\n  message: 'Public error to share'\n});\n\n// Messages with { private: true } will not be written when logged.\nlogger.log({\n  private: true,\n  level: 'error',\n  message: 'This is super secret - hide it.'\n});\n</code></pre>\n<p>如果返回了<code>false</code>,<code>format.combine</code>就会中断后面的格式化函数</p>\n<pre><code class=\"language-javascript\">const { format } = require('winston');\nconst { combine, timestamp, label } = format;\n\nconst willNeverThrow = format.combine(\n  format(info =&gt; { return false })(), // Ignores everything\n  format(info =&gt; { throw new Error('Never reached') })()\n);\n</code></pre>\n<h3 id=\"%E5%88%9B%E5%BB%BA%E5%AE%9A%E5%88%B6%E7%9A%84formats\" tabindex=\"-1\">创建定制的formats</h3>\n<p><code>Format</code>这个类有一个方法:<code>transform(info,opts)</code>,而且它会返回一个修改后的<code>info</code>object,包含</p>\n<ul>\n<li>info</li>\n<li><code>opts</code></li>\n</ul>\n<p><code>transform(info,opts)</code>函数得到一个新的<code>Format</code></p>\n<pre><code class=\"language-javascript\">const { format } = require('winston');\n\nconst volume = format((info, opts) =&gt; {\n  if (opts.yell) {\n    info.message = info.message.toUpperCase();\n  } else if (opts.whisper) {\n    info.message = info.message.toLowerCase();\n  }\n\n  return info;\n});\n\n// `volume` is now a function that returns instances of the format.\nconst scream = volume({ yell: true });\nconsole.dir(scream.transform({\n  level: 'info',\n  message: `sorry for making you YELL in your head!`\n}, scream.options));\n// {\n//   level: 'info'\n//   message: 'SORRY FOR MAKING YOU YELL IN YOUR HEAD!'\n// }\n\n// `volume` can be used multiple times to create different formats.\nconst whisper = volume({ whisper: true });\nconsole.dir(whisper.transform({\n  level: 'info',\n  message: `WHY ARE THEY MAKING US YELL SO MUCH!`\n}, whisper.options));\n// {\n//   level: 'info'\n//   message: 'why are they making us yell so much!'\n// }\n</code></pre>\n<p>理解,调用<code>const v = format((info,opts)=&gt;{xxx})</code>,那么<code>v</code>是一个函数,它会反回一个<code>format</code>实例,它接收的一个<code>opts</code>,来设定返回的<code>format</code>实例的<code>options</code>属性</p>\n<p><code>format.transform(info_obj,opts)</code>接收二个参数,返回处理过的<code>info</code>object</p>\n<h2 id=\"logging-%E7%AD%89%E7%BA%A7\" tabindex=\"-1\">logging 等级</h2>\n<p><code>winston</code>如果没有指定<code>level</code>,下面的<code>npm</code>的<code>levels</code>会被使用</p>\n<pre><code class=\"language-javascript\">{\n  error: 0,\n  warn: 1,\n  info: 2,\n  verbose: 3,\n  debug: 4,\n  silly: 5\n}\n</code></pre>\n<h3 id=\"%E4%BD%BF%E7%94%A8logging%E7%AD%89%E7%BA%A7\" tabindex=\"-1\">使用logging等级</h3>\n<ul>\n<li>方法1:使用<code>logger.log('info')</code></li>\n<li>方法2:使用<code>logger.info()</code></li>\n</ul>\n<pre><code class=\"language-javascript\">//\n// Any logger instance\n//\nlogger.log('silly', &quot;127.0.0.1 - there's no place like home&quot;);\nlogger.log('debug', &quot;127.0.0.1 - there's no place like home&quot;);\nlogger.log('verbose', &quot;127.0.0.1 - there's no place like home&quot;);\nlogger.log('info', &quot;127.0.0.1 - there's no place like home&quot;);\nlogger.log('warn', &quot;127.0.0.1 - there's no place like home&quot;);\nlogger.log('error', &quot;127.0.0.1 - there's no place like home&quot;);\nlogger.info(&quot;127.0.0.1 - there's no place like home&quot;);\nlogger.warn(&quot;127.0.0.1 - there's no place like home&quot;);\nlogger.error(&quot;127.0.0.1 - there's no place like home&quot;);\n\n//\n// Default logger\n//\nwinston.log('info', &quot;127.0.0.1 - there's no place like home&quot;);\nwinston.info(&quot;127.0.0.1 - there's no place like home&quot;);\n</code></pre>\n<p><code>winston</code>可以自己定义一个<code>level</code>属性在每一个<code>transport</code>上,设定最大的输出等级,</p>\n<pre><code class=\"language-javascript\">const logger = winston.createLogger({\n  levels: winston.config.syslog.levels,\n  transports: [\n    new winston.transports.Console({ level: 'error' }),\n    new winston.transports.File({\n      filename: 'combined.log',\n      level: 'info'\n    })\n  ]\n});\n</code></pre>\n<p>动态改变<code>transport</code>中的<code>level</code></p>\n<pre><code class=\"language-javascript\">const transports = {\n  console: new winston.transports.Console({ level: 'warn' }),\n  file: new winston.transports.File({ filename: 'combined.log', level: 'error' })\n};\n\nconst logger = winston.createLogger({\n  transports: [\n    transports.console,\n    transports.file\n  ]\n});\n\nlogger.info('Will not be logged in either transport!');\ntransports.console.level = 'info';\ntransports.file.level = 'info';\nlogger.info('Will be logged in both transports!');\n</code></pre>\n<h3 id=\"%E4%BD%BF%E7%94%A8%E5%AE%9A%E5%88%B6%E7%9A%84logging%E7%AD%89%E7%BA%A7\" tabindex=\"-1\">使用定制的<code>logging</code>等级</h3>\n<pre><code class=\"language-javascript\">const myCustomLevels = {\n  levels: {\n    foo: 0,\n    bar: 1,\n    baz: 2,\n    foobar: 3\n  },\n  colors: {\n    foo: 'blue',\n    bar: 'green',\n    baz: 'yellow',\n    foobar: 'red'\n  }\n};\n\nconst customLevelLogger = winston.createLogger({ \n  levels: myCustomLevels.levels \n});\n\ncustomLevelLogger.foobar('some foobar level-ed message');\n</code></pre>\n<h3 id=\"%E4%BD%BF%E7%94%A8%E6%A0%87%E5%87%86%E7%9A%84log-level-%E6%9C%89%E9%A2%9C%E8%89%B2\" tabindex=\"-1\">使用标准的log level 有颜色</h3>\n<pre><code class=\"language-javascript\">winston.format.combine(\n  winston.format.colorize(),\n  winston.format.json()\n);\n</code></pre>\n<h2 id=\"%E8%BE%93%E5%87%BA\" tabindex=\"-1\">输出</h2>\n<h3 id=\"%E5%90%8C%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%A4%9A%E4%B8%AA%E8%BE%93%E5%87%BA\" tabindex=\"-1\">同类型的多个输出</h3>\n<pre><code class=\"language-javascript\">const logger = winston.createLogger({\n  transports: [\n    new winston.transports.File({\n      filename: 'combined.log',\n      level: 'info'\n    }),\n    new winston.transports.File({\n      filename: 'errors.log',\n      level: 'error'\n    })\n  ]\n});\n</code></pre>\n<p>如果之后你想删除一个<code>transport</code></p>\n<pre><code class=\"language-javascript\">const combinedLogs = logger.transports.find(transport =&gt; {\n  return transport.filename === 'combined.log'\n});\n\nlogger.remove(combinedLogs);\n</code></pre>\n<h3 id=\"%E5%8A%A0%E5%85%A5%E5%AE%9A%E5%88%B6%E7%9A%84transport\" tabindex=\"-1\">加入定制的transport</h3>\n<pre><code class=\"language-javascript\">const Transport = require('winston-transport');\nconst util = require('util');\n\n//\n// Inherit from `winston-transport` so you can take advantage\n// of the base functionality and `.exceptions.handle()`.\n//\nmodule.exports = class YourCustomTransport extends Transport {\n  constructor(opts) {\n    super(opts);\n    //\n    // Consume any custom options here. e.g.:\n    // - Connection information for databases\n    // - Authentication information for APIs (e.g. loggly, papertrail, \n    //   logentries, etc.).\n    //\n  }\n\n  log(info, callback) {\n    setImmediate(() =&gt; {\n      this.emit('logged', info);\n    });\n\n    // Perform the writing to the remote service\n    callback();\n  }\n};\n</code></pre>\n<h2 id=\"%E5%BC%82%E5%B8%B8\" tabindex=\"-1\">异常</h2>\n<p>可以捕获<code>uncaughtException</code>事件</p>\n<pre><code class=\"language-javascript\">const { createLogger, transports } = require('winston');\n\n// Enable exception handling when you create your logger.\nconst logger = createLogger({\n  transports: [\n    new transports.File({ filename: 'combined.log' }) \n  ],\n  exceptionHandlers: [\n    new transports.File({ filename: 'exceptions.log' })\n  ]\n});\n\n// Or enable it later on by adding a transport or using `.exceptions.handle`\nconst logger = createLogger({\n  transports: [\n    new transports.File({ filename: 'combined.log' }) \n  ]\n});\n\n// Call exceptions.handle with a transport to handle exceptions\nlogger.exceptions.handle(\n  new transports.File({ filename: 'exceptions.log' })\n);\n</code></pre>\n<p><strong>要不要退出</strong></p>\n<pre><code class=\"language-javascript\">const logger = winston.createLogger({ exitOnError: false });\n\n//\n// or, like this:\n//\nlogger.exitOnError = false;\n</code></pre>\n<h2 id=\"%E6%8C%89%E6%97%A5%E6%9C%9F%E8%BE%93%E5%87%BA%E5%88%B0%E5%8D%95%E7%8B%AC%E7%9A%84%E6%96%87%E4%BB%B6\" tabindex=\"-1\">按日期输出到单独的文件</h2>\n<p>使用<a href=\"https://github.com/winstonjs/winston-daily-rotate-file\">winston-daily-rotate-file</a></p>\n<p>样例:</p>\n<pre><code class=\"language-javascript\">  var winston = require('winston');\n  require('winston-daily-rotate-file');\n\n  var transport = new (winston.transports.DailyRotateFile)({\n    filename: 'application-%DATE%.log',\n    datePattern: 'YYYY-MM-DD-HH',\n    zippedArchive: true,\n    maxSize: '20m',\n    maxFiles: '14d'\n  });\n\n  transport.on('rotate', function(oldFilename, newFilename) {\n    // do something fun\n  });\n\n  var logger = winston.createLogger({\n    transports: [\n      transport\n    ]\n  });\n\n  logger.info('Hello World!');\n</code></pre>\n<h2 id=\"%E7%9B%B8%E5%85%B3%E8%B5%84%E6%96%99\" tabindex=\"-1\">相关资料</h2>\n<ul>\n<li><a href=\"https://github.com/winstonjs/winston\">winston github地址</a></li>\n<li><a href=\"https://blog.csdn.net/Justinjiang1314/article/details/80619038\">pm2 cluster模式下，使用winston-daily-rotate-file</a></li>\n</ul>\n"}