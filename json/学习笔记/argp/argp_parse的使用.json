{"data":{"_id":"S1f30EtnQ","title":"argp_parse的使用","date":"2018-11-02 11:04","update":"2018-11-02 11:04","series":"无","categories":["学习笔记"],"tags":["c语言","参数解析"]},"__content":"<h2 id=\"%E7%9B%B8%E5%85%B3\" tabindex=\"-1\">相关</h2>\n<p>使用c语言来解析 <code>argv</code>有这几种常用方式<code>getopt</code>,<code>argp</code>,<a href=\"https://www.gnu.org/software/libc/manual/html_node/Argp.html#Argp\">相关说明</a>,这里学习一下<code>argp</code>的使用.</p>\n<h2 id=\"%E5%87%BD%E6%95%B0%E5%8E%9F%E5%9E%8B\" tabindex=\"-1\">函数原型</h2>\n<pre><code class=\"language-c\">Function: error_t argp_parse (const struct argp *argp, int argc, char **argv, unsigned flags, int *arg_index, void *input)\n</code></pre>\n<p><strong>参数</strong></p>\n<ul>\n<li><code>const struct argp *argp</code></li>\n<li><code>int argc</code>       参数的数量</li>\n<li><code>char **argv</code>    参数列表</li>\n<li><code>unsigned flags</code> 影响解析parser的表现</li>\n<li><code>int *arg_index</code> 非空,第一个不被解析的参数下标会被return</li>\n<li><code>void *input</code>    一个指针,最后传给parse_function的里arg_state-&gt;input</li>\n</ul>\n<p><code>ARGP_NO_EXIT</code> or <code>ARGP_NO_HELP</code> flags 被包含了,不会在程序退出的时候输出一个参数信息</p>\n<p>如果成功,<code>return 0</code></p>\n<h2 id=\"%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F\" tabindex=\"-1\">全局变量</h2>\n<p>全局变量,在<code>--version, --help</code>的时候使用</p>\n<ul>\n<li>变量: <code>const char * argp_program_version</code>,<code>--version</code>的时候使用</li>\n<li>变量: <code>const char * argp_program_bug_address</code> <code>--help</code>的时候使用</li>\n<li>变量: <code>argp_program_version_hook</code>,如果想自己定义一个<code>--version</code>输出函数,使用它</li>\n<li>变量:<code>error_t argp_err_exit_status</code>,解析错误的返回值.</li>\n</ul>\n<h2 id=\"%E8%AE%BE%E5%AE%9Aargp%E5%8F%82%E6%95%B0%E8%A7%A3%E6%9E%90%E5%99%A8\" tabindex=\"-1\">设定argp参数解析器</h2>\n<p>需要定义<strong>struct argp</strong>,它包含下面的参数</p>\n<ul>\n<li><code>const struct argp_option *options</code>,指向<code>argp_option</code>结构体数组,表示哪些参数被解析</li>\n<li><code>argp_parser_t parser</code>,指向一个解析函数</li>\n<li><code>const char *args_doc</code> 非空,在一个末定义的参数出现后被输出</li>\n<li><code>const char *doc</code>    会在<code>--help</code>时输出</li>\n<li><code>const struct argp_child *children</code>  可以不用</li>\n<li><code>char *(*help_filter)(int key, const char *text, void *input)</code>,过滤help信息,可以不用</li>\n<li><code>const char *argp_domain</code> 可以不用</li>\n</ul>\n<h3 id=\"%E8%AE%BE%E5%AE%9Aargp-parser%E7%9A%84%E9%80%89%E9%A1%B9\" tabindex=\"-1\">设定Argp Parser的选项</h3>\n<p>一个结构体,提供给<code>struct argp</code>的第一个参数使用,</p>\n<pre><code class=\"language-c\">\nstruct argp_option {\n    const char *name;  //长名,是0,表明只有短名\n    int key;          //短名,同样是一个关键key值,一定是一个ascii值\n    const char *arg;  //如果不为0,表明这个选项必须提供,出错时 输出这个名字\n    int flags;      //标记 具体看 Argp Option Flags.\n    const char *doc; // 文档,--help 里输出\n    int group;      // 组 ? 不知道怎么用\n}\n</code></pre>\n<p>例子:</p>\n<pre><code class=\"language-c\">struct argp_option _example[]= {\n    //长名,短名,     &quot;arg名&quot;,flag,                 doc,  group\n    {&quot;in&quot;,  'I',&quot;input_file&quot;,  0,&quot;the input file name&quot;,     1},\n    {&quot;out&quot;, 'O',&quot;output_file&quot;, 0,&quot;the output file name&quot;,    2},\n    {0},        //结束\n};\n</code></pre>\n<h4 id=\"argp_parser_t-parser\" tabindex=\"-1\">argp_parser_t parser</h4>\n<p>指向一个解析函数,对上面的<code>argp_option</code>的提供的每一条进行解析,如果为0,会指向的一个返回<code>ARGP_ERR_UNKNOWN</code>的函数</p>\n<p>函数的写法如下,<a href=\"https://www.gnu.org/software/libc/manual/html_node/Argp-Parser-Functions.html#Argp-Parser-Functions\">参考</a></p>\n<pre><code class=\"language-c\">error_t parser (int key, char *arg, struct argp_state *state)\n</code></pre>\n<ul>\n<li>key,就是上面<code>argp_option</code>的key值</li>\n<li>arg,应该是key后跟的值,如<code>-I 1024</code> 1024 就是</li>\n<li>state,指向<code>argp_state</code>结构,包含了一些有用的信息</li>\n</ul>\n<h2 id=\"%E5%AE%9E%E4%BE%8B%E5%85%B3%E7%B3%BB%E5%9B%BE\" tabindex=\"-1\">实例关系图</h2>\n<pre><code>\n+===========================================================+\n|               struct argp                                 |\n+===========================================================+\n|const struct argp_option *options                          +------------+\n+-----------------------------------------------------------+            |\n|argp_parser_t parser                                       |------------+---+\n+-----------------------------------------------------------+            |   |\n|const char *args_doc                                       |            |   |\n+-----------------------------------------------------------+            |   |\n|const char *doc                                            |            |   |\n+-----------------------------------------------------------+            |   |\n|const struct argp_child *children                          |            |   |\n+-----------------------------------------------------------+            |   |\n|char *(*help_filter)(int key, const char *text, void *input)            |   |\n+-----------------------------------------------------------+            |   |\n|const char *argp_domain                                    |            |   |\n+-----------------------------------------------------------+            |   |\n                                                                         |   |\n  +====================+                                                 |   |\n  | struct argp_option | &lt;-----------------------------------------------+   |\n  +====================+                                                     |\n  | const char *name   |                                                     |\n  +--------------------+                                                     |\n  | int key;           |                                                     |\n  +--------------------+                                                     |\n  | const char *arg    |                                                     |\n  +--------------------+                                                     |\n  | int flags          |                                                     |\n  +--------------------+                                                     |\n  | const char *doc    |                                                     |\n  +--------------------+                                                     |\n  | int group          |                                                     |\n  +--------------------+                                                     |\n                                                                             |\n +-------------------------------------------------------------+             |\n |error_t parser (int key, char *arg, struct argp_state *state)|&lt;------------+\n +-------------------------------------------------------------+             \n\n</code></pre>\n<h3 id=\"flags\" tabindex=\"-1\">flags</h3>\n<p>ARGP_NO_EXIT or ARGP_NO_HELP</p>\n<h2 id=\"%E4%BE%8B%E5%AD%90%E4%B8%80%3A\" tabindex=\"-1\">例子一:</h2>\n<pre><code class=\"language-c\">\n#include &lt;argp.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;stdio.h&gt;\n\nconst char *argp_program_version= &quot;rainboy'parser ver1.0&quot;;\nconst char * argp_program_bug_address = &quot;rainboylvx@qq.com&quot;;\nchar args_doc[]= &quot;args_doc&quot;;\nchar doc[]= &quot;all doc&quot;;\n\nstruct argp_option _example[]= {\n    //长名,短名,     &quot;arg名&quot;,flag,                 doc,     group\n    {&quot;in&quot;,  'i',&quot;input_file&quot;,  0,&quot;the input file name&quot;,     1},\n    {&quot;out&quot;, 'o',&quot;output_file&quot;, 0,&quot;the output file name&quot;,    2},\n    {0},        //结束\n};\n\nerror_t arg_parser(int key, char *arg,struct argp_state *state){\n    switch(key){\n        case 'i':\n            printf(&quot;this opt is in,-i,arg is :%s\\n&quot;,arg);\n            break;\n        case 'o':\n            printf(&quot;this opt is in,-o,arg is :%s\\n&quot;,arg);\n            break;\n        default:\n            printf(&quot;unkonw opt\\n&quot;);\n            /*printf(&quot;key:\\t%c\\n&quot;,key);*/\n            /*printf(&quot;arg:\\t%s\\n&quot;,arg);*/\n            return ARGP_ERR_UNKNOWN;\n    }\n    return 0;\n}\n\nstruct argp _argp_ = {\n    _example,\n    arg_parser,\n    args_doc,\n    doc\n};\n\n\nint main(int argc ,char **argv){\n    \n    int res = argp_parse(&amp;_argp_,argc,argv,0, 0, 0);\n    exit (0);\n}\n</code></pre>\n<h2 id=\"argp_use-%E5%87%BD%E6%95%B0%E7%9A%84%E4%BD%BF%E7%94%A8\" tabindex=\"-1\">argp_use 函数的使用</h2>\n<blockquote>\n<p>Outputs the standard usage message for the argp parser referred to by state to state-&gt;err_stream and terminates the program with exit (argp_err_exit_status). See Argp Global Variables.</p>\n</blockquote>\n<p>输出usage 信息,并且结束程序</p>\n<h2 id=\"state-%3Einput-%E7%9A%84%E6%8C%87%E9%92%88\" tabindex=\"-1\">state-&gt;input 的指针</h2>\n<h2 id=\"%E8%87%AA%E5%8A%A8%E8%BE%93%E5%87%BAusage\" tabindex=\"-1\">自动输出usage</h2>\n<p>没有参数的时候</p>\n"}