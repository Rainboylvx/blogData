{"data":{"_id":"H1qsteGkM","title":"cmake学习笔记一","date":"2017-11-10 22:05","update":"2018-09-11 10:01","series":"cmake学习笔记","categories":["学习笔记"],"tags":["linux","cmake"]},"__content":"<h2 id=\"%E5%AE%89%E8%A3%85cmake\" tabindex=\"-1\">安装cmake</h2>\n<p><code>arch linux</code>下安装</p>\n<pre><code class=\"language-sh\">pacman -S make\npacman -S cmake\n</code></pre>\n<p>下面按<a href=\"https://wenku.baidu.com/view/473211985ef7ba0d4b733b1d.html\">cmake 从入门到粗通</a>学习一遍</p>\n<p>我学习的代码放在:<a href=\"https://github.com/rainboy-learn/cmake\">git-cmake练习代码</a></p>\n<h2 id=\"%E4%BE%8B%E5%AD%90%E4%B8%80%3A%E6%9E%84%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%BB%8F%E5%85%B8%E7%9A%84%E7%A8%8B%E5%BA%8F\" tabindex=\"-1\">例子一:构建一个经典的程序</h2>\n<pre><code class=\"language-c\">#include &lt;cstdio&gt;\n\nint main(){\n    printf(&quot;hello world\\n&quot;);\n    return 0;\n}\n</code></pre>\n<p>创建一个<code>CMakeLists.txt</code></p>\n<pre><code>project(HELLO)\nset(SRC_LIST main.cpp)\nadd_executable(hello ${SRC_LIST})\n</code></pre>\n<p>执行</p>\n<pre><code class=\"language-bash\">mkdir build\ncmake ..\nmake\n</code></pre>\n<p>创建<code>hello</code>程序成功,<code>add_executable($1,$2)</code> 应该添加一个编译文件</p>\n<h2 id=\"%E4%BE%8B%E5%AD%901.1-%E6%9F%A5%E7%9C%8B%E5%8F%98%E9%87%8F\" tabindex=\"-1\">例子1.1 查看变量</h2>\n<pre><code>project(HELLO)\nset(SRC_LIST main.cpp)\n\n# 输出变量\nmessage(&quot;can you see me ?&quot;)\n\nmessage(${HELLO_BINARY_DIR})\nmessage(${HELLO_SOURCE_DIR})\n\nmessage(${PROJECT_BINARY_DIR})\nmessage(${PROJECT_SOURCE_DIR})\n\n#add_executable(hello ${SRC_LIST})\n</code></pre>\n<p>执行后可以看到变量输出</p>\n<ul>\n<li>set 设置变量</li>\n<li>add_executable 生成一个可执行文件</li>\n<li>add_library  生成一个库文件</li>\n<li>message  输出信息</li>\n<li><code>set( CMAKE_VERBOSE_MAKEFILE on)</code> 输出更详细的信息</li>\n</ul>\n<h2 id=\"%E4%BE%8B%E5%AD%902%3A-%E4%B8%89%E4%B8%AA%E6%96%87%E4%BB%B6%E7%BC%96%E8%AF%91\" tabindex=\"-1\">例子2: 三个文件编译</h2>\n<p><code>hello.h</code></p>\n<pre><code class=\"language-c\">#ifndef _HELLO_\n#define _HELLO_\nvoid hello(char *name);\n#endif\n</code></pre>\n<p><code>hello.cpp</code></p>\n<pre><code class=\"language-c\">#include &quot;hello.h&quot;\n#include &lt;cstdio&gt;\n\nvoid hello(char *name){\n    printf(&quot;Hello %s!\\n&quot;,name);\n}\n</code></pre>\n<p><code>main.cpp</code></p>\n<pre><code class=\"language-c\">#include &lt;cstdio&gt;\n#include &quot;hello.h&quot;\n\nint main(){\n    hello(&quot;rainboy&quot;);\n    return 0;\n}\n\n</code></pre>\n<p>手动编译</p>\n<pre><code class=\"language-bash\">mkdir handle_build\n# 生成 .o 文件\ng++ -c hello.cpp -o handle_build/hello.o\n# 生成 lib文件\nar crv handle_build/libhello.a handle_build/hello.o\n# 生成 目标程序\ng++ main.cpp handle_build/libhello.a -o handle_build/hello\n</code></pre>\n<p>建立<code>CMakeLists.txt</code></p>\n<pre><code>project(HELLO)\nset(SRC_LIST main.cpp hello.cpp)\nadd_executable(hello ${SRC_LIST})\n</code></pre>\n<h2 id=\"%E4%BE%8B%E5%AD%903%3A-hello.c-%E7%BC%96%E8%AF%91%E6%88%90%E5%BA%93\" tabindex=\"-1\">例子3: hello.c 编译成库</h2>\n<p>手动</p>\n<pre><code class=\"language-bash\">mkdir handle_build\n# 生成 .o 文件\ng++ -c hello.cpp -o handle_build/hello.o\n# 生成 lib文件\nar crv handle_build/libhello.a handle_build/hello.o\n# 生成 目标程序\ng++ main.cpp handle_build/libhello.a -o handle_build/hello\n</code></pre>\n<pre><code>project(HELLO)\nset(lib_src hello.cpp)\nset(app_src main.cpp)\n\nadd_library(libhello ${lib_src})\n\nadd_executable(hello ${app_src})\n\ntarget_link_libraries(hello libhello)\n</code></pre>\n<h2 id=\"cmake-%E5%85%B3%E9%94%AE%E5%AD%97\" tabindex=\"-1\">cmake 关键字</h2>\n<pre><code>cmake_minimum_required      注意最小的需要的cmake版本\nproject                     设置项目名,主要作用是可以改变&lt;projectname&gt;_bin_path 等变量\nset                         设置变量\nconfigure_file ()           ??\ninclude_directories()       包含的头文件目录 相当于 -I\nadd_executable()            生成的目标文件\ntarget_link_libraries()     生成的目标文件 要和哪些库 链接\n</code></pre>\n<h2 id=\"%E4%BE%8B%E5%AD%904%3A\" tabindex=\"-1\">例子4:</h2>\n<pre><code>.\n├── CMakeLists.txt\n├── lib\n│   ├── CMakeLists.txt\n│   ├── hello.cpp\n│   └── hello.h\n└── src\n    ├── CMakeLists.txt\n    └── main.cpp\n</code></pre>\n<p>顶层的 CMakeList.txt 文件中使用 add_subdirectory 告诉 cmake 去子目录寻找新的 CMakeList.txt 子文件<br>\n在 src 的 CMakeList.txt 文件中，新增加了 include_directories，用来指明头文件所在的路径</p>\n<h2 id=\"%E4%BE%8B%E5%AD%905%3A-%E7%94%9F%E6%88%90%E7%9A%84%E7%9B%AE%E6%A0%87%E6%96%87%E4%BB%B6%E8%BE%93%E5%87%BA%E5%88%B0%E5%AF%B9%E5%BA%94%E7%9A%84%E7%9B%AE%E5%BD%95\" tabindex=\"-1\">例子5: 生成的目标文件输出到对应的目录</h2>\n<p>如果想让可执行文件在 bin 目录，库文件在 lib 目录怎么办</p>\n<p>修改例子4:</p>\n<p>在<code>lib/CMakeLists.txt</code>加入</p>\n<pre><code>set(LIBRARY_OUTPUT_PATH ${PROJECT_BINARY_DIR}/lib)\n</code></pre>\n<p>在<code>src/CMakeLists.txt</code>加入</p>\n<pre><code>set(EXECUTABLE_OUTPUT_PATH ${PROJECT_BINARY_DIR}/bin)\n</code></pre>\n<p>**原理:**这里主要是修改了两个默认的变量<code>LIBRARY_OUTPUT_PATH,EXECUTABLE_OUTPUT_PATH</code></p>\n<h2 id=\"%E4%BE%8B%E5%AD%906%3A%E5%8A%A8%E6%80%81%E5%BA%93\" tabindex=\"-1\">例子6:动态库</h2>\n<p>在例子三至五中，我们始终用的静态库，那么用动态库应该更酷一点吧。 试着写一下\n如 果 不 考 虑 windows 下 ， 这 个 例 子 应 该 是 很 简 单 的 ， 只 需 要 在 上 个 例 子 的\nlibhello/CMakeList.txt 文件中的 add_library 命令中加入一个 SHARED 参数：\nadd_library(libhello SHARED ${LIB_SRC})</p>\n<p>略!</p>\n<h2 id=\"%E4%BE%8B%E5%AD%907%3Adebug-%E5%92%8C-release\" tabindex=\"-1\">例子7:Debug 和 Release</h2>\n<p>具体参看git上的<code>7/</code>文件下的<code>CMakeLists.txt</code></p>\n<pre><code>SET(CMAKE_CXX_FLAGS_DEBUG &quot;$ENV{CXXFLAGS} -O0 -Wall -g -ggdb&quot;)\nSET(CMAKE_CXX_FLAGS_RELEASE &quot;$ENV{CXXFLAGS} -O3 -Wall&quot;)\nSET(CMAKE_BUILD_TYPE Debug)\n# 设置输出文件\nmessage(${CMAKE_CXX_COMPILER})\nIF(${CMAKE_BUILD_TYPE} STREQUAL Debug)\n    MESSAGE(&quot;DEBUG-------------------&quot;)\n    set(EXECUTABLE_OUTPUT_PATH ${PROJECT_BINARY_DIR}/Debug)\nELSE()\n    MESSAGE(&quot;Realse-------------------&quot;)\n    set(EXECUTABLE_OUTPUT_PATH ${PROJECT_BINARY_DIR}/Realse)\nENDIF()\n</code></pre>\n<p>不仅可以在<code>CMakeLists.txt</code>里改变<code>CMAKE_BUILD_TYPE</code>的值,也可以在命令行里改变</p>\n<pre><code class=\"language-sh\">cmake CMAKE_BUILD_TYPE=Debug\n</code></pre>\n<h2 id=\"%E7%9B%B8%E5%85%B3%E8%B5%84%E6%96%99\" tabindex=\"-1\">相关资料</h2>\n<ul>\n<li><a href=\"http://www.jianshu.com/p/6b7aabfbace0\">cmake 入门-CMake Tutorial</a></li>\n<li><a href=\"https://wenku.baidu.com/view/473211985ef7ba0d4b733b1d.html\">cmake 从入门到精通</a></li>\n<li><a href=\"http://www.jianshu.com/p/bbf68f9ddffa\">CMake简明教程</a></li>\n<li><a href=\"https://cmake.org/documentation/\">cmake 官方文档</a></li>\n<li><a href=\"https://wenku.baidu.com/view/27fdeb23168884868662d63a.html\">cmake 手册详解</a></li>\n<li><a href=\"https://wenku.baidu.com/view/8fceba7eb9d528ea80c7797a.html\">cmake 中文手册</a></li>\n<li><a href=\"http://www.hahack.com/codes/cmake/\">CMake 入门实战</a></li>\n</ul>\n"}