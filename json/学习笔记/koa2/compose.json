{"data":{},"__content":"<h2 id=\"%E8%A7%A3%E8%AF%BB\" tabindex=\"-1\">解读</h2>\n<p>代码</p>\n<pre><code class=\"language-javascript\">'use strict'\n\n/**\n * Expose compositor.\n */\n\nmodule.exports = compose\n\n/**\n * Compose `middleware` returning\n * a fully valid middleware comprised\n * of all those which are passed.\n *\n * @param {Array} middleware\n * @return {Function}\n * @api public\n */\n\nfunction compose (middleware) {\n    //检查是否是array\n  if (!Array.isArray(middleware)) throw new TypeError('Middleware stack must be an array!')\n    //array内必须是函数\n  if (!Array.isArray(middleware)) throw new TypeError('Middleware stack must be an array!')\n  for (const fn of middleware) {\n    if (typeof fn !== 'function') throw new TypeError('Middleware must be composed of functions!')\n  }\n\n  /**\n   * @param {Object} context\n   * @return {Promise}\n   * @api public\n   */\n\n   //核心\n  return function (context, next) {\n    // last called middleware #\n    let index = -1\n    return dispatch(0)\n    function dispatch (i) {\n      if (i &lt;= index) return Promise.reject(new Error('next() called multiple times'))\n      index = i\n      let fn = middleware[i]\n      if (i === middleware.length) fn = next\n      if (!fn) return Promise.resolve()\n      try {\n        return Promise.resolve(fn(context, dispatch.bind(null, i + 1)));\n      } catch (err) {\n        return Promise.reject(err)\n      }\n    }\n  }\n}\n</code></pre>\n<h2 id=\"%E5%8F%82%E8%80%83\" tabindex=\"-1\">参考</h2>\n<ul>\n<li><a href=\"https://wenku.baidu.com/view/3db5c7a6ad51f01dc381f156.html\">中间件执行模块koa-Compose源码分析</a></li>\n<li><a href=\"https://www.jianshu.com/p/5d0f1d9ef746\">解读koa-compose</a></li>\n</ul>\n"}