{"data":{"_id":"H19euIXOQ","title":"celery的使用教程","date":"2018-09-10 10:43","update":"2018-09-10 10:43","series":"celery笔记","categories":["学习笔记"],"tags":["celery","python"]},"__content":"<h1 id=\"celery\" tabindex=\"-1\">celery</h1>\n<p><a href=\"http://www.celeryproject.org/\">celery</a>是一个分布式框架,可以完成:定时任务,异步执行,队列执行等功能.</p>\n<p>celery是可以基于redies,RabbitMQ之一实现.</p>\n<p>由<code>python</code>编写的分布式系统,我们通常用它来完成任务队列式操作.</p>\n<h2 id=\"celery-%E7%9B%B8%E5%85%B3%E8%B5%84%E6%96%99\" tabindex=\"-1\">celery 相关资料</h2>\n<ul>\n<li><a href=\"http://www.celeryproject.org/\">官网</a></li>\n<li><a href=\"http://docs.celeryproject.org\">官方文档</a></li>\n<li><a href=\"http://python.jobbole.com/87238\">伯乐在线-分布式神器 Celery</a></li>\n</ul>\n<h2 id=\"%E4%BD%BF%E7%94%A8celey%E5%89%8D%E5%BF%85%E9%A1%BB%E6%98%8E%E7%99%BD%E7%9A%84%E6%A6%82%E5%BF%B5\" tabindex=\"-1\">使用celey前必须明白的概念</h2>\n<ul>\n<li>Brokers 中间人,存放任务的地方,RabbitMQ,redis</li>\n<li>Workers  工作者,运行任务</li>\n<li>Result stres /backend 存入结果的地方,redis</li>\n<li>Tasks 任务,我们需要执行的任务</li>\n</ul>\n<h2 id=\"%E5%AE%89%E8%A3%85\" tabindex=\"-1\">安装</h2>\n<pre><code class=\"language-sh\"># 安装redis\nsudo pacman -S redis \n# 安装celery\nsudo pip install redis\n</code></pre>\n<h2 id=\"%E5%BC%80%E5%A7%8B%E4%BD%BF%E7%94%A8%3A%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E4%BE%8B%E5%AD%90\" tabindex=\"-1\">开始使用:一个简单的例子</h2>\n<p>首先选一个broker(中间人),我当然选<code>redis</code>,ubuntu 下安装</p>\n<pre><code>sudo apt-get instal redis-server\nsudo pip3 install celery\nsudo pip3 install redis\n</code></pre>\n<p>我们建立一个<code>t.py</code> 文件</p>\n<pre><code class=\"language-py\">from celery import Celery\n\n# 配置\napp = Celery('tasks',broker='redis://localhost:6379/0')\n  \n@app.task\ndef add(x,y):\n    return x+y\n</code></pre>\n<p>启动它:</p>\n<pre><code class=\"language-bash\">#启动 redis\nredis-server &amp;\ncelery -A t worker --loglevel=info\n</code></pre>\n<p>含义:把<code>t.py</code>做为worker,设置log等级为info</p>\n<pre><code class=\"language-py\">&gt;&gt;&gt; from t import add\n&gt;&gt;&gt; add.delay(4,4)\n&gt;&gt;&gt; result = add.delay(4,4)\n&gt;&gt;&gt; result.get()\n</code></pre>\n<h2 id=\"%E9%85%8D%E7%BD%AE\" tabindex=\"-1\">配置</h2>\n<p>所有的可配置项在<a href=\"http://docs.celeryproject.org/en/latest/userguide/configuration.html#configuration\">这里</a></p>\n<p>你可以这配置:</p>\n<pre><code class=\"language-py\">app.conf.task_serializer = 'json'\n</code></pre>\n<p>也可以一次配置多项</p>\n<pre><code class=\"language-py\">app.conf.update(\n    task_serializer='json',\n    accept_content=['json'],  # Ignore other content\n    result_serializer='json',\n    timezone='Europe/Oslo',\n    enable_utc=True,\n)\n</code></pre>\n<p>也可以建立一个配置文件<code>celeryconfig.py</code>,(可以是其它的名字)</p>\n<pre><code class=\"language-py\">celeryconfig.py:\nbroker_url = 'amqp://'\nresult_backend = 'rpc://'\n\ntask_serializer = 'json'\nresult_serializer = 'json'\naccept_content = ['json']\ntimezone = 'Europe/Oslo'\nenable_utc = True\n</code></pre>\n<p>要确保配置模块没有任何语法错误，且能够正确的工作，你可以通过下面的命令尝试导入它：</p>\n<pre><code class=\"language-bash\">$ python -m celeryconfig\n</code></pre>\n"}