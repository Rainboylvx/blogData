{"data":{},"__content":"<h1 id=\"5-%E9%80%92%E5%BD%92\" tabindex=\"-1\">5 递归</h1>\n<pre><code class=\"language-plaintext\">maximum' :: (Ord a) =&gt; [a] -&gt; a   \nmaximum' [] = error &quot;maximum of empty list&quot;   \nmaximum' [x] = x   \nmaximum' (x:xs)    \n    | x &gt; maxTail = x   \n    | otherwise = maxTail   \n    where maxTail = maximum' xs\n</code></pre>\n<pre><code class=\"language-plaintext\">replicate' :: (Num i, Ord i) =&gt; i -&gt; a -&gt; [a]   \nreplicate' n x   \n    | n &lt;= 0    = []   \n    | otherwise = x:replicate' (n-1) x\n</code></pre>\n<p>实现<code>take</code>函数</p>\n<pre><code class=\"language-plaintext\">take' :: (Num i, Ord i) =&gt; i -&gt; [a] -&gt; [a]   \ntake' n _   \n    | n&lt;=0   = []   \ntake' _ []     = []   \ntake' n (x:xs) = x : take' (n-1) xs\n</code></pre>\n<p>quicksort</p>\n<pre><code class=\"language-plaintext\">quicksort :: (Ord a) =&gt; [a] -&gt; [a]   \nquicksort [] = []   \nquicksort (x:xs) =   \n  let smallerSorted = quicksort [a | a&lt;-xs, a&lt;=x]  \n       biggerSorted = quicksort [a | a&lt;-xs, a &gt; x]   \n  in smallerSorted ++ [x] ++ biggerSorted\n</code></pre>\n"}