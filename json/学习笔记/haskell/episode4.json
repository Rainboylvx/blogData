{"data":{},"__content":"<h1 id=\"%E7%AC%AC%E5%9B%9B%E7%AB%A0-syntax-in-function-%E5%87%BD%E6%95%B0%E7%9A%84%E8%AF%AD%E6%B3%95\" tabindex=\"-1\">第四章 syntax in Function 函数的语法</h1>\n<h2 id=\"1-%E6%A8%A1%E5%BC%8F%E5%8C%B9%E9%85%8D\" tabindex=\"-1\">1 模式匹配</h2>\n<p>lucky 7</p>\n<pre><code>lucky :: (Integral a) =&gt; a -&gt; String\nlucky 7 = &quot;LUCKY NUMBER SEVEN!!&quot;\nlucky x = &quot;Sorry, you're out of lock,pal!&quot;\n</code></pre>\n<pre><code class=\"language-plaintext\">GHCi, version 9.0.2: https://www.haskell.org/ghc/  :? for help\nghci&gt; :l lucky.hs\n[1 of 1] Compiling Main             ( lucky.hs, interpreted )\nOk, one module loaded.\nghci&gt; lucky 7\n&quot;LUCKY NUMBER SEVEN!!&quot;\nghci&gt; lucky 8\n&quot;Sorry, you're out of lock,pal!&quot;\nghci&gt;\n</code></pre>\n<p>as 模式</p>\n<pre><code class=\"language-plaintext\">capital :: String -&gt; String   \ncapital &quot;&quot; = &quot;Empty string, whoops!&quot;   \ncapital all@(x:xs) = &quot;The first letter of &quot; ++ all ++ &quot; is &quot; ++ [x]  \n</code></pre>\n<h2 id=\"2-%E4%BB%80%E4%B9%88%E6%98%AF-guards\" tabindex=\"-1\">2 什么是 Guards</h2>\n<p>模式用来检查一个值是否合适并从中取值，而 guard 则用来检查一个值的某项属性是否为真</p>\n<pre><code class=\"language-plaintext\">bmiTell :: (RealFloat a) =&gt; a -&gt; String  \nbmiTell bmi  \n    | bmi &lt;= 18.5 = &quot;You're underweight, you emo, you!&quot;  \n    | bmi &lt;= 25.0 = &quot;You're supposedly normal. Pffft, I bet you're ugly!&quot;  \n    | bmi &lt;= 30.0 = &quot;You're fat! Lose some weight, fatty!&quot;  \n    | otherwise   = &quot;You're a whale, congratulations!&quot;\n</code></pre>\n<pre><code class=\"language-plaintext\">bmiTell :: (RealFloat a) =&gt; a -&gt; a -&gt; String  \nbmiTell weight height  \n    | weight / height ^ 2 &lt;= 18.5 = &quot;You're underweight, you emo, you!&quot;  \n    | weight / height ^ 2 &lt;= 25.0 = &quot;You're supposedly normal. Pffft, I bet you're ugly!&quot;  \n    | weight / height ^ 2 &lt;= 30.0 = &quot;You're fat! Lose some weight, fatty!&quot;  \n    | otherwise                 = &quot;You're a whale, congratulations!&quot;\n</code></pre>\n<pre><code class=\"language-plaintext\">max' :: (Ord a) =&gt; a -&gt; a -&gt; a  \nmax' a b   \n    | a &gt; b     = a  \n    | otherwise = b\n</code></pre>\n<p>guard 也可以塞在一行里面。但这样会丧失可读性，因此是不被鼓励的。即使是较短的函数也是如此，不过出于展示，我们可以这样重写 ​max'​：</p>\n<pre><code class=\"language-plaintext\">max' :: (Ord a) =&gt; a -&gt; a -&gt; a  \nmax' a b | a &gt; b = a | otherwise = b\n</code></pre>\n<h2 id=\"3-%E5%85%B3%E9%94%AE%E5%AD%97-where\" tabindex=\"-1\">3 关键字 Where</h2>\n<p>很像sql语句啊,是一个命名方式</p>\n<pre><code class=\"language-plaintext\">bmiTell :: (RealFloat a) =&gt; a -&gt; a -&gt; String  \nbmiTell weight height  \n    | bmi &lt;= 18.5 = &quot;You're underweight, you emo, you!&quot;  \n    | bmi &lt;= 25.0 = &quot;You're supposedly normal. Pffft, I bet you're ugly!&quot;  \n    | bmi &lt;= 30.0 = &quot;You're fat! Lose some weight, fatty!&quot;  \n    | otherwise   = &quot;You're a whale, congratulations!&quot;  \n    where bmi = weight / height ^ 2\n</code></pre>\n<pre><code class=\"language-plaintext\">bmiTell :: (RealFloat a) =&gt; a -&gt; a -&gt; String  \nbmiTell weight height  \n    | bmi &lt;= skinny = &quot;You're underweight, you emo, you!&quot;  \n    | bmi &lt;= normal = &quot;You're supposedly normal. Pffft, I bet you're ugly!&quot;  \n    | bmi &lt;= fat    = &quot;You're fat! Lose some weight, fatty!&quot;  \n    | otherwise     = &quot;You're a whale, congratulations!&quot;  \n    where bmi = weight / height ^ 2  \n          skinny = 18.5  \n          normal = 25.0  \n          fat = 30.0\n</code></pre>\n<p><code>where</code> 绑定不会在多个模式中共享。如果你在一个函数的多个模式中重复用到同一名字，就应该把它置于全局定义之中。</p>\n<p><code>where</code> 绑定也可以使用_模式匹配_！前面那段代码可以改成：</p>\n<pre><code>...  \nwhere bmi = weight / height ^ 2  \n      (skinny, normal, fat) = (18.5, 25.0, 30.0)\n</code></pre>\n<p>我们完全按可以在函数的参数上直接使用模式匹配</p>\n<p>where 定义函数</p>\n<pre><code class=\"language-plaintext\">calcBmis :: (RealFloat a) =&gt; [(a, a)] -&gt; [a]  \ncalcBmis xs = [bmi w h | (w, h) &lt;- xs] \n    where bmi weight height = weight / height ^ 2\n</code></pre>\n<p><code>where</code> 绑定还可以一层套一层地来使用。 有个常见的写法是，在定义一个函数的时候也写几个辅助函数摆在 <code>where</code> 绑定中。 而每个辅助函数也可以透过 <code>where</code> 拥有各自的辅助函数。</p>\n<h2 id=\"4-%E5%85%B3%E9%94%AE%E5%AD%97-let\" tabindex=\"-1\">4 关键字 Let</h2>\n<p><code>let</code> 的格式为 <code>let [bindings] in [expressions]</code>。在 <code>let</code> 中绑定的名字仅对 <code>in</code> 部分可见。</p>\n<pre><code class=\"language-plaintext\">cylinder :: (RealFloat a) =&gt; a -&gt; a -&gt; a  \ncylinder r h = \n    let sideArea = 2 * pi * r * h  \n        topArea = pi * r ^2  \n    in  sideArea + 2 * topArea\n</code></pre>\n<p><code>let</code> 绑定本身是个表达式,因而可以随处安放</p>\n<h2 id=\"5-case-expressions\" tabindex=\"-1\">5 Case expressions</h2>\n<p><code>case</code>是一种表达式</p>\n<pre><code class=\"language-plaintext\">head' :: [a] -&gt; a  \nhead' [] = error &quot;No head for empty lists!&quot;  \nhead' (x:_) = x\n</code></pre>\n<pre><code class=\"language-plaintext\">head' :: [a] -&gt; a  \nhead' xs = case xs of [] -&gt; error &quot;No head for empty lists!&quot;  \n                      (x:_) -&gt; x\n</code></pre>\n<p>模式匹配本质上不过就是 case 语句的语法糖而已。这两段代码就是完全等价的：</p>\n<p>case的语法</p>\n<pre><code class=\"language-plaintext\">case expression of pattern -&gt; result  \n                   pattern -&gt; result  \n                   pattern -&gt; result  \n                   ...\n</code></pre>\n<p><code>case</code>表达式可以用在任何地方。例如：</p>\n<pre><code>describeList :: [a] -&gt; String  \ndescribeList xs = &quot;The list is &quot; ++ case xs of [] -&gt; &quot;empty.&quot;  \n                                               [x] -&gt; &quot;a singleton list.&quot;   \n                                               xs -&gt; &quot;a longer list.&quot;\n</code></pre>\n<pre><code class=\"language-plaintext\">describeList :: [a] -&gt; String  \ndescribeList xs = &quot;The list is &quot; ++ case xs of [] -&gt; &quot;empty.&quot;  \n                                               [x] -&gt; &quot;a singleton list.&quot;   \n                                               xs -&gt; &quot;a longer list.&quot;\n\ndescribeList :: [a] -&gt; String  \ndescribeList xs = &quot;The list is &quot; ++ what xs  \n    where what [] = &quot;empty.&quot;  \n          what [x] = &quot;a singleton list.&quot;  \n          what xs = &quot;a longer list.&quot;\n</code></pre>\n"}