{"data":{},"__content":"<h1 id=\"%E7%AC%AC%E4%B8%89%E7%AB%A0-types-and-typeclasses\" tabindex=\"-1\">第三章 types and typeclasses</h1>\n<h2 id=\"1-believe-the-type-%E7%9B%B8%E4%BF%A1%E7%B1%BB%E5%9E%8B\" tabindex=\"-1\">1 believe the type 相信类型</h2>\n<p>使用<code>:t</code> 来得到表达式的类型</p>\n<pre><code class=\"language-plaintext\">\nghci&gt; :t 'a'\n'a' :: Char\nghci&gt; :t &quot;a&quot;\n&quot;a&quot; :: String\nghci&gt; :t 1\n1 :: Num p =&gt; p\nghci&gt; :t True\nTrue :: Bool\nghci&gt; :t &quot;HEL&quot;\n&quot;HEL&quot; :: String\nghci&gt; :t (True,1)\n(True,1) :: Num b =&gt; (Bool, b)\nghci&gt; :t (True,'a')\n(True,'a') :: (Bool, Char)\nghci&gt; \n</code></pre>\n<p>声明函数时给它一个类型</p>\n<pre><code class=\"language-plaintext\">removeNonUppercase :: [Char] -&gt; [Char]   \nremoveNonUppercase st = [ c | c &lt;- st, c `elem` ['A'..'Z']]\n</code></pre>\n<p>一个多参数函数的类型</p>\n<pre><code class=\"language-plaintext\">addThree :: Int -&gt; Int -&gt; Int -&gt; Int   \naddThree x y z = x + y + z\n</code></pre>\n<p>一些常用的类型<code>Int,Integer,Float,Double,Bool,Char</code></p>\n<h2 id=\"type-variables-%E7%B1%BB%E5%9E%8B%E5%8F%98%E9%87%8F\" tabindex=\"-1\">Type variables 类型变量</h2>\n<p><code>head</code>函数的类型</p>\n<pre><code class=\"language-plaintext\">ghci&gt; :t head\nhead :: [a] -&gt; a\n\nghci&gt; :t fst\nfst :: (a, b) -&gt; a\n</code></pre>\n<p><code>a</code>是一个类型变量,表示它可以是任何一种类型,就像其它语言的泛型(generic)\n一样</p>\n<p>使用类型变量的函数,叫做polymorphic function(多态函数)</p>\n<h2 id=\"3-typeclasses-101-%E7%B1%BB%E7%B1%BB%E5%9E%8B101\" tabindex=\"-1\">3 typeclasses 101 类类型101</h2>\n<p>typeclass 定义了一系列的接口</p>\n<pre><code class=\"language-plaintext\">ghci&gt; :t (==)\n(==) :: Eq a =&gt; a -&gt; a -&gt; Bool\n</code></pre>\n<p><code>Eq</code>是一个<code>typeclass</code></p>\n<pre><code class=\"language-plaintext\">ghci&gt; :t (&gt;)\n(&gt;) :: Ord a =&gt; a -&gt; a -&gt; Bool\n</code></pre>\n"}