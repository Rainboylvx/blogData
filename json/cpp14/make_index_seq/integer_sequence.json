{"data":{},"__content":"<p>c++14加入的一个类模板</p>\n<p>作用: 产生一个compile-time的一个整数序列,它作为一个类,作为 模板函数的的参数的时候,模板参数包可以be deduced(被推断)出来各个整数是什么,进而被使用</p>\n<p>可能实现代码</p>\n<pre><code class=\"language-cpp\">template&lt;typename T,T... ints&gt;\nstruct integer_sequence {\n    using value_type = T;\n    static constexpr size_t size() noexcept {\n        return sizeof...(ints);\n    }\n};\n</code></pre>\n<pre><code class=\"language-cpp\">#include &lt;iostream&gt;\n\ntemplate&lt;typename T,T... ints&gt;\nstruct integer_sequence {\n    using value_type = T;\n    static constexpr size_t size() noexcept {\n        return sizeof...(ints);\n    }\n};\n\ntemplate&lt;typename T,T... ints&gt;\nvoid print(integer_sequence&lt;T, ints... &gt;){\n    ((std::cout &lt;&lt; ints &lt;&lt; ' '),...); //fold expression\n    std::cout  &lt;&lt; std::endl;\n}\n\n\nint main(){\n    print(integer_sequence&lt;int, 1,2,3,4,5&gt;{});\n    std::make_index_sequence&lt;10&gt; a;\n    return 0;\n}\n\n</code></pre>\n<h2 id=\"%E8%BE%85%E5%8A%A9%E6%A8%A1%E6%9D%BF(helper-templates)\" tabindex=\"-1\">辅助模板(Helper templates)</h2>\n<ul>\n<li><code>index_sequence</code> 指定了T是<code>std::size_t</code>的<code>integer_sequence</code></li>\n<li>0-N的序列,类型自己指定<code>make_integer_sequence</code> 表示<code>using make_integer_sequence = std::integer_sequence&lt;T, /* a sequence 0, 1, 2, ..., N-1 */ &gt;;</code></li>\n<li>0-N的序列<code>make_index_sequence = std::make_integer_sequence&lt;std::size_t, N&gt;;</code></li>\n<li>转换任意模板参数包为一个序列<code>index_sequence_for = std::make_index_sequence&lt;sizeof...(T)&gt;;</code></li>\n</ul>\n<h1 id=\"make_index_sequence-%E7%9A%84%E5%AE%9E%E7%8E%B0\" tabindex=\"-1\"><code>make_index_sequence</code> 的实现</h1>\n<p>看 <a href=\"./make_index_sequence%E5%8E%9F%E7%90%86.md\"><code>./make_index_sequence原理.md</code></a></p>\n<p>实现1: 以递归的方式进行类型展开(查找)</p>\n<p>实现2: 以继承的方式得到类型</p>\n<p>gcc的实现</p>\n<p>__integer_pack (length)\nWhen used as the pattern of a pack expansion within a template definition, expands to a template argument pack containing integers from 0 to length-1. This is provided for efficient implementation of std::make_integer_sequence.</p>\n<pre><code>template&lt;typename Tp,Tp... _Num&gt;\nusing make_integer_sequence = integer_sequence&lt;_Tp, __integer_pack(_Num)...&gt;;\n</code></pre>\n<pre><code class=\"language-cpp\">/* author: Rainboy email: rainboylvx@qq.com  time: 2022年 01月 27日 星期四 23:47:35 CST */\n#include &lt;bits/stdc++.h&gt;\nusing namespace std;\ntypedef long long ll;\nconst int maxn = 1e6+5,maxe = 1e6+5; //点与边的数量\n\nint n,m;\n/* 定义全局变量 */\n\ntemplate&lt;typename T,T ints&gt;\nusing int_seq = integer_sequence&lt;T, __integer_pack(ints)...&gt;;\n    //using make_integer_sequence\n//#if __has_builtin(__make_integer_seq)\n      //= __make_integer_seq&lt;integer_sequence, _Tp, _Num&gt;;\n//#else\n      //= integer_sequence&lt;_Tp, __integer_pack(_Num)...&gt;;\nint main(int argc,char * argv[]){\n    int_seq&lt;int,3&gt; a;\n    std::cout &lt;&lt; a.size() &lt;&lt; std::endl;\n    std::cout &lt;&lt; int_seq&lt;int,4&gt;::size() &lt;&lt; std::endl;\n    return 0;\n}\n\n</code></pre>\n"}