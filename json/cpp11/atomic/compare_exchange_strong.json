{"data":{},"__content":"<p><code>compare_exchange_strong</code>,见名知意:它表示的意思是<strong>比较,交换,强制(保证)</strong></p>\n<p>函数原型</p>\n<pre><code class=\"language-plaintext\">bool compare_exchange_weak(T &amp;expected, T desired, std::memory_order success, std::memory_order failure);\nbool compare_exchange_weak(T &amp;expected, T desired, std::memory_order success, std::memory_order failure) volatile;\nbool compare_exchange_weak(T &amp;expected, T desired, std::memory_order order = std::memory_order_seq_cst);\nbool compare_exchange_weak(T &amp;expected, T desired, std::memory_order order = std::memory_order_seq_cst) volatile;\nbool compare_exchange_strong(T &amp;expected, T desired, std::memory_order success = std::memory_order failure);\nbool compare_exchange_strong(T &amp;expected, T desired, std::memory_order success = std::memory_order failure) volatile;\nbool compare_exchange_strong(T &amp;expected, T desired, std::memory_order order = std::memory_order_seq_cst);\nbool compare_exchange_strong(T &amp;expected, T desired,std::memory_order order = std::memory_order_seq_cst) volatile;\n</code></pre>\n<p>作用,若<code>*this</code> 与<code>expected</code> 逐位相等,那就是满足期望,<code>*this = expected</code>,否则<code>expected = *this</code></p>\n<p>这是一种CAS操作(compare and swap)</p>\n<p>在应用中CAS可以用于实现无锁数据结构，常见的有无锁队列（先入先出）[3] 以及无锁栈（先入后出）。</p>\n<ul>\n<li><a href=\"https://www.cnblogs.com/sunbines/p/14800113.html\">【多线程】compare_exchange_strong用法 - 苏格拉底的落泪 - 博客园</a></li>\n<li>[比较并交换 - 维基百科，自由的百科全书](<a href=\"https://zh.m.wikipedia.org/zh-hans/%E6%AF%94%E8%BE%83%E5%B9%B6%E4%BA%A4%E6%8D%A2#:~:text=%E6%AF%94%E8%BE%83%E5%B9%B6%E4%BA%A4%E6%8D%A2(compare%20and,%E6%9B%BF%E6%8D%A2%E4%B8%BA%E6%96%B0%E7%9A%84%E5%80%BC%E3%80%82)\">https://zh.m.wikipedia.org/zh-hans/比较并交换#:~:text=比较并交换(compare and,替换为新的值。)</a></li>\n</ul>\n"}