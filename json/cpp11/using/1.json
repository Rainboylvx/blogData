{"data":{},"__content":"<p>Usage</p>\n<ul>\n<li>using-directives for namespaces and using-declarations for namespace members</li>\n<li>using-declarations for class members</li>\n<li>using-enum-declarations for enumerators (since C++20)</li>\n<li>type alias and alias template declaration (since C++11)</li>\n</ul>\n<pre><code class=\"language-cpp\">#include &lt;iostream&gt;\nstruct B {\n    virtual void f(int) { std::cout &lt;&lt; &quot;B::f\\n&quot;; }\n    void g(char)        { std::cout &lt;&lt; &quot;B::g\\n&quot;; }\n    void h(int)         { std::cout &lt;&lt; &quot;B::h\\n&quot;; }\n protected:\n    int m; // B::m is protected\n    typedef int value_type;\n};\n \nstruct D : B {\n    using B::m; // D::m is public\n    using B::value_type; // D::value_type is public\n \n    using B::f;\n    void f(int) { std::cout &lt;&lt; &quot;D::f\\n&quot;; } // D::f(int) overrides B::f(int)\n    using B::g;\n    void g(int) { std::cout &lt;&lt; &quot;D::g\\n&quot;; } // both g(int) and g(char) are visible\n                                           // as members of D\n    using B::h;\n    void h(int) { std::cout &lt;&lt; &quot;D::h\\n&quot;; } // D::h(int) hides B::h(int)\n};\n \nint main()\n{\n    D d;\n    B&amp; b = d;\n \n//    b.m = 2; // error, B::m is protected\n    d.m = 1; // protected B::m is accessible as public D::m\n    b.f(1); // calls derived f()\n    d.f(1); // calls derived f()\n    d.g(1); // calls derived g(int)\n    d.g('a'); // calls base g(char)\n    b.h(1); // calls base h()\n    d.h(1); // calls derived h()\n}\n</code></pre>\n<p>Inheriting constructors -&gt; <a href=\"https://en.cppreference.com/w/cpp/language/using_declaration\">Using-declaration - cppreference.com</a></p>\n<p><a href=\"https://en.cppreference.com/w/cpp/keyword/using\">C++ keywords: using - cppreference.com</a></p>\n"}