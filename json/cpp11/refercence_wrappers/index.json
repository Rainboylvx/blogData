{"data":{},"__content":"<p><a href=\"https://en.cppreference.com/w/cpp/utility/functional#Reference_wrappers\">Function objects : Reference_wrappers - cppreference.com</a></p>\n<p>a class template that wraps a reference</p>\n<p>参考代码</p>\n<pre><code class=\"language-cpp\">#include &lt;iostream&gt;\n#include &lt;functional&gt;\n\nint main(){\n    int a = 10;\n    std::reference_wrapper&lt;int&gt; t1(a);\n    t1.get() = 11;\n    std::cout &lt;&lt; a &lt;&lt; std::endl;\n    return 0;\n}\n</code></pre>\n<pre><code class=\"language-cpp\">//如何实现?\n//https://en.cppreference.com/w/cpp/utility/functional/reference_wrapper -&gt; Possible implementation\n#include &lt;iostream&gt;\n\nnamespace my {\n    \n\ntemplate&lt;typename T&gt;\nclass reference_wrapper {\n    \n};\n\n} // end namespace my\n\nint main(){\n    \n    return 0;\n}\n</code></pre>\n<h2 id=\"unwrap_reference-(c%2B%2B20)\" tabindex=\"-1\">unwrap_reference (c++20)</h2>\n<p><a href=\"https://en.cppreference.com/w/cpp/utility/functional/unwrap_reference\">std::unwrap_reference, std::unwrap_ref_decay - cppreference.com</a></p>\n<pre><code class=\"language-cpp\">#include &lt;type_traits&gt;\n#include &lt;iostream&gt;\n#include &lt;functional&gt;\n\nint main(){\n    int a = 1;\n    std::reference_wrapper&lt;int&gt; t1(a);\n\n    t1.get() = 20;\n    std::cout &lt;&lt; &quot;a = &quot; &lt;&lt; a &lt;&lt; std::endl;\n\n    using T = std::unwrap_reference_t&lt;decltype(t1)&gt;;\n    T t2 = a;\n    t2 = 30;\n    std::cout &lt;&lt; &quot;a = &quot; &lt;&lt; a &lt;&lt; std::endl;\n\n    using t3=std::unwrap_reference_t&lt;const std::reference_wrapper&lt;int&gt;&gt;;\n    std::cout &lt;&lt; \n        typeid(t3).name()\n        &lt;&lt; std::endl;\n    // type t3 is const std::reference_wrapper&lt;int&gt;\n    return 0;\n}\n</code></pre>\n"}