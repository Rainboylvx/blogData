{"data":{},"__content":"<p>chrono 是c++11提供的时间库,提供计时,时钟等功能.也就是说如果你想有关时候相关的api,那么就使用这个库.</p>\n<p>概念</p>\n<ul>\n<li>时间段 duration</li>\n<li>时间点 time points</li>\n<li>时钟  clocks</li>\n</ul>\n<h2 id=\"%E7%B2%BE%E5%BA%A6-std%3A%3Aratio\" tabindex=\"-1\">精度 std::ratio</h2>\n<p>头文件<code>&lt;ratio&gt;</code>\nstd:duration&lt;Rep,std::radio&gt;</p>\n<p>文档地址 : <a href=\"https://en.cppreference.com/w/cpp/numeric/ratio/ratio\">https://en.cppreference.com/w/cpp/numeric/ratio/ratio</a></p>\n<p>作用:</p>\n<blockquote>\n<p>The class template std::ratio provides compile-time rational arithmetic support. Each instantiation of this template exactly represents any finite rational number as long as its numerator Num and denominator Denom are representable as compile-time constants of type std::intmax_t. In addition, Denom may not be zero and may not be equal to the most negative value.</p>\n</blockquote>\n<p>提供编译期可运算有理数支持</p>\n<p>有两个静态成员函数,分子(num),分母(den)</p>\n<p>在编译期间会把分子与分母共同除以最大公约数.</p>\n<p>核心作用:<code>std::ratio&lt;1,100&gt;</code>本身提供了一种类型,这个类型表示了精度,为其它需要精度类型的类,提供支持.</p>\n<pre><code class=\"language-cpp\">// std::chrono::ratio 时间精度的使用 \n\n#include &lt;iostream&gt;\n#include &lt;ratio&gt;\n\nusing namespace std;\n\nint main(){\n    std::ratio&lt;3, 6&gt; x1;\n    cout &lt;&lt; &quot;x1 num = &quot; &lt;&lt; decltype(x1)::num &lt;&lt; endl;\n    cout &lt;&lt; &quot;x1 den = &quot; &lt;&lt; decltype(x1)::den &lt;&lt; endl;\n    return 0;\n}\n</code></pre>\n<h2 id=\"%E6%97%B6%E9%97%B4%E6%AE%B5\" tabindex=\"-1\">时间段</h2>\n<pre><code class=\"language-cpp\">template&lt;typename Rep , typename Period = std::ratio&lt;1&gt; &gt;\nclass duration;\n</code></pre>\n<p>表示一段时间.</p>\n<ul>\n<li>Rep,例如int ,存数字,表示有多少个节拍(ticks)</li>\n<li>一个节拍的精度,<code>std::ratio&lt;1,1&gt;</code>表示1秒,<code>std::ratio&lt;1,1000&gt;</code>,千分之一秒,也就是1毫秒</li>\n</ul>\n<p><a href=\"https://en.cppreference.com/w/cpp/chrono/duration\">https://en.cppreference.com/w/cpp/chrono/duration</a></p>\n<p>操作</p>\n<ul>\n<li><code>count()</code>,表示时间段内节拍的数量</li>\n<li><code>+,-</code> 数值运算</li>\n<li><code>duration_cast</code>,转换为另一个精度的时间段</li>\n</ul>\n<h2 id=\"%E6%97%B6%E9%97%B4%E7%82%B9-time_point\" tabindex=\"-1\">时间点 <code>time_point</code></h2>\n<p><code>std::chrono::time_point</code>表示一个具体的时间</p>\n<pre><code class=\"language-plaintext\">template&lt;typename Clock, typename Duration = typename Clock::duration&gt;\n</code></pre>\n<p>包含一个时钟(时钟有今天epoch,时间戳),时间段Duration表示到达epcoh的ticks数量</p>\n<ul>\n<li><code>time_since_epoch</code> 得到从epoch到time_point的Duration</li>\n<li><code>time_point_cast</code> ,将一个时间点转为另一个Duration不同的时间点</li>\n</ul>\n<h2 id=\"%E6%97%B6%E9%92%9F\" tabindex=\"-1\">时钟</h2>\n<p>有三个常用的时钟(c++11)</p>\n<pre><code class=\"language-plaintext\">system_clock\nstready_clock\nhigh_resolution_clock\n</code></pre>\n<p>时钟包含一个<code>epoch</code>(时间戳),和一个<code>now()</code>函数用来返回当前的<code>time_point</code></p>\n<h2 id=\"%E4%BB%A3%E7%A0%81%E4%BE%8B%E5%AD%90\" tabindex=\"-1\">代码例子</h2>\n<p><code>time_point</code>获取,转换,相加,<code>time_since_epoch</code>等相关操作</p>\n<pre><code class=\"language-cpp\">//一个例子\n#include &lt;iostream&gt;\n#include &lt;typeinfo&gt;\n#include &lt;chrono&gt;\n\n\nusing namespace std;\n\n// 使用 D s ms 等 literal\nusing namespace std::chrono_literals;\n\nint main(){\n    \n    // 系统时钟 system_clock 求出当前时间点\n    auto t1 = std::chrono::system_clock::now();\n    // t1 的类型为 \n    // std::chrono::time_point\n    //          &lt;std::chrono::system_clock,\n    //          std::chrono::duration&lt;long,std::ratio&lt;1l,10000000000l&gt;\n    //          &gt;\n    // cout &lt;&lt;type\n    //\n    //\n    //\n    // 转换\n    std::chrono::time_point&lt;std::chrono::system_clock, std::chrono::seconds&gt; t2\n        = std::chrono::time_point_cast&lt;std::chrono::seconds&gt;(t1);\n    auto t3 = t2 + 100s;\n\n    cout &lt;&lt; &quot; t3 &gt; t2 &quot; &lt;&lt; std::boolalpha &lt;&lt; (t3 &gt; t2 ) &lt;&lt; &quot;\\n&quot;;\n\n    //可以运行\n    std::chrono::seconds duration_1 = t3 - t2;\n\n    std::cout &lt;&lt; &quot;t3 - t2 -&gt; duration_1 count() = &quot; &lt;&lt;   duration_1.count() &lt;&lt; &quot; seconds\\n&quot;;\n    std::cout \n        &lt;&lt; &quot;t1.time_since_epoch() = &quot;\n        &lt;&lt; t1.time_since_epoch() &lt;&lt; &quot;\\n&quot;;\n\n    std::cout \n        &lt;&lt; &quot;t2.time_since_epoch() = &quot;\n        &lt;&lt; t2.time_since_epoch() &lt;&lt; &quot;\\n&quot;;\n\n\n    std::cout \n        &lt;&lt; &quot;t3.time_since_epoch() = &quot;\n        &lt;&lt; t3.time_since_epoch() &lt;&lt; &quot;\\n&quot;;\n    \n    return 0;\n}\n</code></pre>\n<h2 id=\"%E5%8F%82%E8%80%83\" tabindex=\"-1\">参考</h2>\n<ul>\n<li><a href=\"https://blog.csdn.net/hou8389846/article/details/77962343\">csdn chrono的使用</a></li>\n</ul>\n"}