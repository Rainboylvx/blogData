{"data":{},"__content":"<h1 id=\"tinyasync\" tabindex=\"-1\">tinyasync</h1>\n<p>仓库地址: <a href=\"https://github.com/lhprojects/tinyasync\">https://github.com/lhprojects/tinyasync</a></p>\n<p>一个由c++20协程编写的网络io,想学习它的原理</p>\n<ul>\n<li><a href=\"./first.md\">first,第一次commit</a></li>\n</ul>\n<h2 id=\"%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84\" tabindex=\"-1\">文件结构</h2>\n<pre><code class=\"language-plaintext\">include\n└── tinyasync\n    ├── awaiters.h  各种的等待器,实现的协程的暂停\n    ├── basics.h    所需的头文件,基础类,工具类的定义\n    ├── buffer.h    buffer数组\n    ├── dns_resolver.h  hostName 转 ip\n    ├── io_context.h    核心,IO中心\n    ├── memory_pool.h   内存池,内存分配\n    ├── mutex.h         锁,队列锁,无锁队列\n    ├── task.h          协程的Return Object 实现\n    └── tinyasync.h     包含其它头文件\n\n1 directory, 9 files\n</code></pre>\n<h2 id=\"%E5%8E%9F%E7%90%861%3A-%E4%B8%8D%E9%9C%80%E8%A6%81%E8%99%9A%E5%87%BD%E6%95%B0\" tabindex=\"-1\">原理1: 不需要虚函数</h2>\n<p>前提：</p>\n<ol>\n<li>只需要一个函数进行虚化，所以可以直接定义一个成员变量来存储指针</li>\n</ol>\n<p>类的布局图</p>\n<pre><code>+--------------------+            +--------------------+    \n|m_callback          |            |m_callback          |    \n|                    | A          |                    | A  \n+--------------------+            +--------------------+    \n|b_do_call&lt;type C1&gt;()|            |b_do_call&lt;type C1&gt;()|    \n|b_do_call&lt;type C3&gt;()|            |b_do_call&lt;type C3&gt;()|    \n|b_do_call&lt;type C2&gt;()| B          |b_do_call&lt;type C2&gt;()| B  \n|   ......           |            |   ......           |    \n+--------------------+            +--------------------+    \n|                    |            |                    |    \n|on_callback()       | C1         |on_callback()       | C2 \n|                    |            |                    |    \n+--------------------+            +--------------------+    \n</code></pre>\n<p>代码:<code>./code_by_self/callback.cpp</code></p>\n<p>可以把所有的<code>c1,c2,c3</code>转成</p>\n<p>TODO 补充完整</p>\n<h2 id=\"posttask\" tabindex=\"-1\">PostTask</h2>\n<p>加入任务的队列的有哪些</p>\n<ul>\n<li>post_task 函数</li>\n</ul>\n<p><code>io_context</code>里有\n<code>dns_resolve</code>里\n<code>mutex.h</code>里有</p>\n<p>需要压入任务的\n<code>awaiter.h</code>\n<code>mutex.h</code>\n<code>dns_resolve.h</code></p>\n"}