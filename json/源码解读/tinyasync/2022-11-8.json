{"data":{},"__content":"<p>组件化来理解整个代码</p>\n<p>工具辅助</p>\n<p>核心</p>\n<p>IoContext</p>\n<p>连接</p>\n<p>模块</p>\n<ul>\n<li><code>memory_pool</code></li>\n<li><code>IoContext</code></li>\n<li><code>Awaiter</code></li>\n<li><code>Define</code>,一些宏\n<ul>\n<li>Assert</li>\n<li>Debug print</li>\n</ul>\n</li>\n</ul>\n<p>?</p>\n<ul>\n<li>initialize_once</li>\n</ul>\n<p>TaskPromise 还可以定义 自己从哪个地方申请内存</p>\n<pre><code class=\"language-plaintext\"></code></pre>\n<h2 id=\"%E9%98%85%E8%AF%BB%E5%A4%B4%E6%96%87%E4%BB%B6\" tabindex=\"-1\">阅读头文件</h2>\n<h3 id=\"1.-basics.h\" tabindex=\"-1\">1.  <code>basics.h</code></h3>\n<ul>\n<li><code>memory_resource</code>相关</li>\n<li>工具函数\n<ul>\n<li>format,格式化字符串</li>\n<li><code>close_socket,close_handle</code></li>\n<li><code>to_timespec,sync_sleep</code></li>\n<li><code>abi_name_demangle</code></li>\n<li>宏</li>\n<li><code>coro_name</code>,<code>c_name</code></li>\n<li><code>handle_c_str,socket_c_str</code></li>\n<li><code>to_string_to</code></li>\n<li><code>TINYASYNC_LOG</code>非常有借鉴意义的宏</li>\n<li><code>get_log_str,log_prefix_guad</code></li>\n</ul>\n</li>\n<li>类</li>\n<li><code>thisCoroutineAwaiter</code></li>\n<li><code>Noise</code></li>\n<li><code>ListNode,Queue</code></li>\n<li><code>TicketSpinLock</code></li>\n<li><code>SysSpinLock</code></li>\n</ul>\n<pre><code class=\"language-plaintext\">Acceptor 相关\n\n    class AcceptorImpl; // --&gt; 具体实现\n    class AcceptorCallback; // --&gt; Callback 是哪里的回调,!!作用!!\n    class AcceptorAwaiter; // --&gt; 等待器 ,作用:产生一个Accptor\n</code></pre>\n<h3 id=\"2.-task.h\" tabindex=\"-1\">2. <code>task.h</code></h3>\n<p>这个头文件设计的目的: 完成协程返回对象的设计,来完成对协程的控制</p>\n<ul>\n<li>工具函数</li>\n<li><code>reset_and_throw_exception</code></li>\n</ul>\n"}