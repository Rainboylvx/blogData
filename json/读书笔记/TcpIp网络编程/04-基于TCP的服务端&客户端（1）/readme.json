{"data":{},"__content":"<h1 id=\"%E7%90%86%E8%A7%A3tcp%E5%92%8C%EF%BD%95%EF%BD%84%EF%BD%90\" tabindex=\"-1\">理解TCP和ＵＤＰ</h1>\n<h2 id=\"tcp%2Fip%E5%8D%8F%E8%AE%AE%E6%A0%88\" tabindex=\"-1\">TCP/IP协议栈</h2>\n<p><img src=\"https://ooo.0o0.ooo/2017/06/28/5953bb020f227.png\" alt=\"\"></p>\n<h2 id=\"%E9%93%BE%E8%B7%AF%E5%B1%82\" tabindex=\"-1\">链路层</h2>\n<blockquote>\n<p>链路层是物理连接领域标准化的结果。若两台主机通过网络进行数据交换，则需要路由器之间的连接，链路层就负责这些标准。</p>\n</blockquote>\n<h2 id=\"ip%E5%B1%82\" tabindex=\"-1\">IP层</h2>\n<blockquote>\n<p>IP层是为了解决在复杂网络中进行数据传输，进行路径选择的问题。由于每次传输数据的路径选择不一致，所以当数据发生错误时无法解决，因此IP协议无法应对数据错误。</p>\n</blockquote>\n<h2 id=\"tcp%2Fudp%E5%B1%82\" tabindex=\"-1\">TCP/UDP层</h2>\n<blockquote>\n<p>TCP和UDP以IP层提供的路径信息为基础，进行实际的数据传输，故该层又称为传输层。TCP传输数据过程中，对方收到数据包后会回复确认数据包，如果超时没有回复确认数据包则会超时重传。</p>\n</blockquote>\n<h2 id=\"%E5%BA%94%E7%94%A8%E5%B1%82\" tabindex=\"-1\">应用层</h2>\n<blockquote>\n<p>上述内容是套接字通信过程中自动处理的。选择数据路径和数据确认过程都是隐藏到套接字内部。应用层协议就是根据程序特点制定客户端和服务端的通信规则，网络编程的大部分内容就是设计并实现应用层协议。</p>\n</blockquote>\n<h1 id=\"%E5%AE%9E%E7%8E%B0%E5%9F%BA%E4%BA%8Etcp%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF%2F%E5%AE%A2%E6%88%B7%E7%AB%AF\" tabindex=\"-1\">实现基于TCP的服务器端/客户端</h1>\n<h2 id=\"%E8%BF%9B%E5%85%A5%E7%AD%89%E5%BE%85%E8%BF%9E%E6%8E%A5%E8%AF%B7%E6%B1%82%E7%8A%B6%E6%80%81\" tabindex=\"-1\">进入等待连接请求状态</h2>\n<pre><code>#include&lt;sys/socket.h&gt;\n\nint listen(int sock, int backlog);\n//成功时返回０，失败时返回-1\n</code></pre>\n<ul>\n<li>sock:希望进入等待连接请求状态的套接字，该套接字成为服务端套接字</li>\n<li>backlog:连接请求等待队列的长度，若为５则表示最多有五个连接请求进入等待队列</li>\n</ul>\n<h2 id=\"%E5%8F%97%E7%90%86%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%BF%9E%E6%8E%A5%E8%AF%B7%E6%B1%82\" tabindex=\"-1\">受理客户端连接请求</h2>\n<pre><code>#include&lt;sys/socket.h&gt;\n\nint accept(int sock, struct sockaddr* addr, socklen_t* addrlen);\n//成功时返回创建的套接字，失败时返回-1\n</code></pre>\n<h2 id=\"%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%8F%91%E8%B5%B7%E8%BF%9E%E6%8E%A5%E8%AF%B7%E6%B1%82\" tabindex=\"-1\">客户端发起连接请求</h2>\n<pre><code>int connect(int sock, struct sockaddr* addr, socklen_t* addrlen);\n//成功时返回0，失败时返回-1\n</code></pre>\n<blockquote>\n<p>客户端调用connect函数后只有在以下情况之一才会返回：<br></p>\n</blockquote>\n<ul>\n<li>服务端接受连接请求</li>\n<li>发生网络中断等异常情况</li>\n</ul>\n"}