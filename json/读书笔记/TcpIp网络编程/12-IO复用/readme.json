{"data":{},"__content":"<h2 id=\"%E5%A4%8D%E7%94%A8%E7%9A%84%E7%9A%84%E6%A6%82%E5%BF%B5\" tabindex=\"-1\">复用的的概念</h2>\n<p>使用select函数可以把多个文件描述符集中到一起统一监视.</p>\n<p>使用select的步骤:</p>\n<ol>\n<li>准备阶段</li>\n</ol>\n<ul>\n<li>1.1 设置文件描述符,其时就是设置<code>fd_set</code>这个bitmap结构体,由数个宏来提供操作</li>\n<li>1.2 指定监视范围</li>\n<li>1.3 设置超时</li>\n</ul>\n<ol start=\"2\">\n<li>使用</li>\n</ol>\n<ul>\n<li>调用<code>select</code>函数</li>\n</ul>\n<ol start=\"3\">\n<li>查看结果</li>\n</ol>\n<h2 id=\"%E8%AE%BE%E7%BD%AE%E6%96%87%E4%BB%B6%E6%8F%8F%E8%BF%B0%E7%AC%A6\" tabindex=\"-1\">设置文件描述符</h2>\n<ul>\n<li><code>FD_ZERO(fd_set* fdset)</code>: 将fdset变量的所有位初始化位0</li>\n<li><code>FD_SET(int fd, fd_set* fdset)</code>: 向fdset变量中注册文件描述符fd</li>\n<li><code>FD_CLR(int fd, fd_set* fdset)</code>: 清除fdset变量中的文件描述符fd</li>\n<li><code>FD_ISSET(int fd, fd_set* fdset)</code>: fdset变量中是否存在fd文件描述符</li>\n</ul>\n<h1 id=\"%E8%AE%BE%E7%BD%AE%E7%9B%91%E8%A7%86%E8%8C%83%E5%9B%B4%E5%8F%8A%E8%B6%85%E6%97%B6\" tabindex=\"-1\">设置监视范围及超时</h1>\n<pre><code>#include&lt;sys/select.h&gt;\n#include&lt;sys/time.h&gt;\n\nint select(int maxfd, fd_set* readset, \n            fd_set* writeset,fd_set* exceptset, \n            const struct timeval* timeout\n            );\n//失败时返回-1，超时返回0，成功时返回发生事件的文件描述符数量\n\nstruct timeval\n{\n    long tv_sec;\n    long tv_usec;\n}\n</code></pre>\n<ul>\n<li>maxfd: 监视的文件描述符数量（最大的文件描述符+1）</li>\n<li>readset: 将关注“是否存在待读取数据”的文件描述符存放在readset变量中</li>\n<li>writeset: 将关注”是否可写“的文件描述符存放在writeset变量中</li>\n<li>exceptset: 将关注”是否有异常“的文件描述符放在exceptset变量中\n-timeout: 为了防止调用select函数后陷入无限阻塞状态，可以传递超时信息</li>\n</ul>\n<h2 id=\"%E6%A0%B7%E4%BE%8B%E4%BB%A3%E7%A0%81\" tabindex=\"-1\">样例代码</h2>\n<ul>\n<li><a href=\"./echo_select_server.c\">echo_select_server.c</a></li>\n<li><a href=\"./select.c\">select.c</a></li>\n</ul>\n"}