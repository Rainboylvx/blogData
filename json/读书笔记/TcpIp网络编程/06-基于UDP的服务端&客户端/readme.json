{"data":{},"__content":"<h1 id=\"%E7%90%86%E8%A7%A3udp\" tabindex=\"-1\">理解UDP</h1>\n<blockquote>\n<p>流控制是区分UDP和TCP最重要的标志；UDP并非每次都快于TCP，每次交换的数据量越大，TCP的传输速率越接近UDP的传输速率；TCP比UDP慢通常有以下两点原因：<br></p>\n</blockquote>\n<ul>\n<li>建立连接和连接断开的连接设置和清除过程；</li>\n<li>收发数据的过程中为保证可靠性而增加的流控制机制</li>\n</ul>\n<blockquote>\n<p>如果收发的数据量小但需要频繁建立连接时，UDP比TCP更快。</p>\n</blockquote>\n<h1 id=\"%E5%9F%BA%E4%BA%8Eudp%E7%9A%84%E6%95%B0%E6%8D%AEi%2Fo%E5%87%BD%E6%95%B0\" tabindex=\"-1\">基于UDP的数据I/O函数</h1>\n<pre><code>#include&lt;sys/socket.h&gt;\nssize_t sendto(int sock, void* buff, size_t nbytes, int flags,struct sockaddr* to, socklen_t addrlen);\n//成功时返回发送的字节数，失败时返回-1\n</code></pre>\n<pre><code>#include&lt;sys/socket.h&gt;\nssize_t recvfrom(int sock, void* buff, size_t nbytes, int flags, struct sockaddr* from socklen_t addrlen);\n//成功时返回接收的字节数，失败时返回-1\n</code></pre>\n<h1 id=\"%E5%88%9B%E5%BB%BA%E5%B7%B2%E8%BF%9E%E6%8E%A5udp%E5%A5%97%E6%8E%A5%E5%AD%97\" tabindex=\"-1\">创建已连接UDP套接字</h1>\n<p>通过sendto函数传输数据会经过以下三个步骤：<br></p>\n<ul>\n<li>向UDP套接字中注册目标IP和端口信息</li>\n<li>传输数据</li>\n<li>清除UDP套接字中注册的目标IP和端口信息</li>\n</ul>\n<hr>\n<p>可以通过以下方式创建已连接UDP套接字，可以避免频繁的向UDP套接字中注册目标IP和端口信息。</p>\n<pre><code>int sock = socket(PF_INET, SOCK_DGRAM, 0);\nstruct sockaddr_in addr;\nmemset(&amp;addr, 0, sizeof(addr));\naddr.sin_family = ...\naddr.sin_addr.s_addr = ...\naddr.sin_port = ...\nconnect(sock, (struct sockaddr*)&amp;addr, sizeof(addr));\n</code></pre>\n<p>以上创建的套接字方式与创建TCP客户端套接字的方式并无二致，但是此处的connect函数并没有与对方的UDP套接字连接，这里只是向sock中注册了目标IP和端口信息，之后收发数据就可以使用<code>write() read()</code>函数来进行收发数据。</p>\n"}