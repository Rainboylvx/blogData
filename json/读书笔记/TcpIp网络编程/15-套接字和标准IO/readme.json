{"data":{},"__content":"<h1 id=\"%E6%A0%87%E5%87%86i%2Fo%E5%87%BD%E6%95%B0%E7%9A%84%E4%BC%98%E7%82%B9\" tabindex=\"-1\">标准I/O函数的优点</h1>\n<h2 id=\"%E6%A0%87%E5%87%86i%2Fo%E5%87%BD%E6%95%B0%E7%9A%84%E4%B8%A4%E4%B8%AA%E4%BC%98%E7%82%B9\" tabindex=\"-1\">标准I/O函数的两个优点</h2>\n<ul>\n<li>标准I/O函数具有良好的移植性</li>\n<li>标准I/O函数利用缓冲提高性能</li>\n</ul>\n<h2 id=\"%E6%A0%87%E5%87%86i%2Fo%E5%87%BD%E6%95%B0%E7%9A%84%E5%87%A0%E4%B8%AA%E7%BC%BA%E7%82%B9\" tabindex=\"-1\">标准I/O函数的几个缺点</h2>\n<ul>\n<li>不易进行双向通信</li>\n<li>有时可能需要频繁的调用fflush函数</li>\n<li>需要以FILE结构体指针的形式返回文件描述符</li>\n</ul>\n<h1 id=\"%E4%BD%BF%E7%94%A8%E6%A0%87%E5%87%86i%2Fo%E5%87%BD%E6%95%B0\" tabindex=\"-1\">使用标准I/O函数</h1>\n<h2 id=\"%E5%88%A9%E7%94%A8fdopen%E5%87%BD%E6%95%B0%E8%BD%AC%E6%8D%A2%E4%B8%BAfile%E7%BB%93%E6%9E%84%E4%BD%93%E6%8C%87%E9%92%88\" tabindex=\"-1\">利用fdopen函数转换为FILE结构体指针</h2>\n<pre><code>#include&lt;stdio.h&gt;\nFILE* fdopen(int filedes, const char* mode);\n//成功时返回FILE结构体指针，失败时返回NULL指针\n</code></pre>\n<ul>\n<li>filedes:需要转换的文件描述符</li>\n<li>mode:将要创建的FILE结构体指针的模式信息</li>\n</ul>\n<pre><code>#include&lt;stdio.h&gt;\nint fd = open(&quot;data.txt&quot;, O_WRONLY|O_CREATE|O_TRUNC);\nFILE* fp = fdopen(fd, 'w');\nfputs(&quot;Network c programming \\n&quot;, fp);\nfclose(fp);\n</code></pre>\n<h2 id=\"%E5%88%A9%E7%94%A8fileno%E5%87%BD%E6%95%B0%E8%BD%AC%E6%8D%A2%E4%B8%BA%E6%96%87%E4%BB%B6%E6%8F%8F%E8%BF%B0%E7%AC%A6\" tabindex=\"-1\">利用fileno函数转换为文件描述符</h2>\n<pre><code>#include&lt;stdio.h&gt;\nint fileno(FILE* stream);\n//成功时返回转换后的文件描述符，失败时返回-1\n</code></pre>\n"}