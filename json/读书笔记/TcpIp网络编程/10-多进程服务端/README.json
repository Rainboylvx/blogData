{"data":{},"__content":"<h1 id=\"%E9%80%9A%E8%BF%87%E8%B0%83%E7%94%A8fork%E5%87%BD%E6%95%B0%E5%88%9B%E5%BB%BA%E8%BF%9B%E7%A8%8B\" tabindex=\"-1\">通过调用fork函数创建进程</h1>\n<pre><code>#include &lt;unistd.h&gt;\n\npid_t fork();//成功时返回进程ID，失败时返回-1\n</code></pre>\n<ul>\n<li>父进程：返回子进程ID <br></li>\n<li>子进程：返回0</li>\n</ul>\n<h1 id=\"%E9%94%80%E6%AF%81%E5%83%B5%E5%B0%B8%E8%BF%9B%E7%A8%8B1%EF%BC%9A%E5%88%A9%E7%94%A8wait%E5%87%BD%E6%95%B0\" tabindex=\"-1\">销毁僵尸进程1：利用wait函数</h1>\n<pre><code>#include &lt;sys/wait.h&gt;\n\npid_t wait(int* status);//成功时返回子进程ID，失败时返回-1\n</code></pre>\n<ul>\n<li><code>WIFEXITED(status)</code>: 子进程正常终止时返回true <br></li>\n<li><code>WEXITSTATUS(status)</code>: 返回子进程的返回值</li>\n</ul>\n<h1 id=\"%E9%94%80%E6%AF%81%E5%83%B5%E5%B0%B8%E8%BF%9B%E7%A8%8B2%EF%BC%9A%E4%BD%BF%E7%94%A8waitpid%E5%87%BD%E6%95%B0\" tabindex=\"-1\">销毁僵尸进程2：使用waitpid函数</h1>\n<pre><code>#include &lt;sys/wait.h&gt;\n\npid_t waitpid(pid_t pid, int* status, int option);\n//成功时返回子进程ID或0,失败时返回-1\n</code></pre>\n<ul>\n<li>pid: 目标子进程id，若传递-1,则与wait函数相同，可以等待任意子进程终止 <br></li>\n<li>option: 传递常量WNOHANG，即使没有终止的子进程也不会进入阻塞状态，而是返回0并退出</li>\n</ul>\n<h1 id=\"%E4%BF%A1%E5%8F%B7%E4%B8%8Esignal%E5%87%BD%E6%95%B0\" tabindex=\"-1\">信号与signal函数</h1>\n<pre><code>#include &lt;signal.h&gt;\n\nvoid (*signal(int signo, void(*func)(int)))(int);\n</code></pre>\n<ul>\n<li>函数名：signal <br></li>\n<li>参数：int signal, void(*func)(int) <br></li>\n<li>返回值：参数类型为int，返回值为void的函数指针 <br></li>\n</ul>\n<blockquote>\n<p>第一个参数表示特殊情况信息，第二个参数表示在该种特殊情况发生时所要调用的函数地址，下面给出部分可以在signal函数中注册的特殊情况和对应的常数。<br></p>\n</blockquote>\n<ul>\n<li><code>SIGALRM</code>:  已到通过调用<code>alarm()</code>函数注册的时间</li>\n<li><code>SIGINT</code>:   输入CTRL+C</li>\n<li><code>SIGCHILD</code>: 子进程终止</li>\n</ul>\n<pre><code>#include &lt;unistd.h&gt;\n\nunsigned int alarm(unsigned int seconds);\n//返回0或以秒为单位距SIGALRM信号发生所剩时间\n</code></pre>\n<blockquote>\n<p>如果传递一个正整形参数，则经过相应时间后将产生一个SIGALRM信号。若传递0,则之前对SIGALRM信号的预约将取消。如果通过该函数预约信号后未指定对该信号的处理函数，则（通过调用<code>signal()</code>函数）终止进程，不做任何处理。 <br></p>\n</blockquote>\n<h1 id=\"%E5%88%A9%E7%94%A8sigaction%E5%87%BD%E6%95%B0%E8%BF%9B%E8%A1%8C%E4%BF%A1%E5%8F%B7%E5%A4%84%E7%90%86\" tabindex=\"-1\">利用<code>SIGACTION</code>函数进行信号处理</h1>\n<pre><code>#include &lt;signal.h&gt;\n\nint sigaction(int signo, const struct sigaction* act, struct sigaction* oldact);\n//成功时返回0,失败时返回-1\n</code></pre>\n<ul>\n<li>signo:  与<code>signal</code>函数相同，传递信号信息</li>\n<li>act:    对应第一个参数的信号处理函数信息</li>\n<li>oldact: 通过此参数获取之前注册的处理信号的函数指针，若不需要则传递0</li>\n</ul>\n<pre><code>struct sigaction\n{\n    void (*sa_handler)(int);\n    sigset_t sa_mask;\n    int sa_flag;\n}\n</code></pre>\n<blockquote>\n<p>第一个参数用于指定信号的处理函数的地址，第二、三个参数用于指定信号相关的选项和特性，一般初始化为0即可。</p>\n</blockquote>\n"}