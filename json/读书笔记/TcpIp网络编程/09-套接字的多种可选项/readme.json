{"data":{},"__content":"<h1 id=\"%E5%A5%97%E6%8E%A5%E5%AD%97%E7%9A%84%E5%8F%AF%E9%80%89%E9%A1%B9%E5%92%8Cio%E7%BC%93%E5%86%B2%E5%A4%A7%E5%B0%8F\" tabindex=\"-1\">套接字的可选项和IO缓冲大小</h1>\n<h2 id=\"getsockopt-%26-setsockopt\" tabindex=\"-1\">getsockopt &amp; setsockopt</h2>\n<pre><code>#include&lt;sys/socket.h&gt;\nint getsockopt(int sock, int level, int optname,void* optval,socklen_t* optlen);\n//成功时返回0，失败时返回-1\n</code></pre>\n<ul>\n<li>sock:套接字文件描述符</li>\n<li>level:要查看的协议层</li>\n<li>optname:要查看的可选项名</li>\n<li>optval:保存查看结果的缓冲地址值</li>\n<li>optlen:第四个参数的缓冲大小</li>\n</ul>\n<pre><code>#include&lt;sys/socket.h&gt;\nint setsockopt(int sock, int level, int optname, void*optval,socklen_t optlen);\n//成功时返回0，失败时返回-1\n</code></pre>\n<h2 id=\"so_sndbuf-%26-so_rcvbuf\" tabindex=\"-1\">SO_SNDBUF &amp; SO_RCVBUF</h2>\n<pre><code>int sock = socket(PF_INET,SOCK_STREAM,0);\nint optval;\nsocklen_t optlen;\nint state = getsockopt(sock, SOL_SOCKET, SO_SNDBUF,(void*)&amp;optval, &amp;optlen);\n\noptval = 1024*3;\noptlen = sizeof(optval);\nstate = setsockopt(sock, SOL_SOCKET, SO_RCVBUF,(void*)&amp;optval,optlen);\n</code></pre>\n<h2 id=\"%E5%9C%B0%E5%9D%80%E5%86%8D%E5%88%86%E9%85%8D\" tabindex=\"-1\">地址再分配</h2>\n<pre><code>int sock = socket(PF_INET, SOCK_STREAM, 0);\nint optval = 1;\nsocklen_t optlen = sizeof(optval);\nint state = setsockopt(sock, SOL_SOCKET, SO_REUSEADDR,(void*)&amp;optval, optlen);\n</code></pre>\n<h2 id=\"tcp_nodelay\" tabindex=\"-1\">TCP_NODELAY</h2>\n<pre><code>int sock = socket(PF_INET, SOCK_STREAM, 0);\nint optval =1;\nint state = setsockopt(sock, IPPROTO_TCP, TCP_NODELAY,(void*)&amp;optval,sizeof(optval));\n</code></pre>\n"}